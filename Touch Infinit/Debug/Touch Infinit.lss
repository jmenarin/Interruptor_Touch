
Touch Infinit.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000004c  00803e00  000014f4  000015a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000014ee  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000006  000094ee  000014ee  000015a2  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          0000003f  00803e4c  00803e4c  000015f4  2**0
                  ALLOC
  4 .comment      00000060  00000000  00000000  000015f4  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001654  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 000002c8  00000000  00000000  00001690  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000504f  00000000  00000000  00001958  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002409  00000000  00000000  000069a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001618  00000000  00000000  00008db0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000004b0  00000000  00000000  0000a3c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00002455  00000000  00000000  0000a878  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000c08  00000000  00000000  0000cccd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000001d8  00000000  00000000  0000d8d5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
       2:	33 c0       	rjmp	.+102    	; 0x6a <__bad_interrupt>
       4:	32 c0       	rjmp	.+100    	; 0x6a <__bad_interrupt>
       6:	31 c0       	rjmp	.+98     	; 0x6a <__bad_interrupt>
       8:	30 c0       	rjmp	.+96     	; 0x6a <__bad_interrupt>
       a:	2f c0       	rjmp	.+94     	; 0x6a <__bad_interrupt>
       c:	32 c0       	rjmp	.+100    	; 0x72 <__vector_6>
       e:	2d c0       	rjmp	.+90     	; 0x6a <__bad_interrupt>
      10:	2c c0       	rjmp	.+88     	; 0x6a <__bad_interrupt>
      12:	2b c0       	rjmp	.+86     	; 0x6a <__bad_interrupt>
      14:	2a c0       	rjmp	.+84     	; 0x6a <__bad_interrupt>
      16:	29 c0       	rjmp	.+82     	; 0x6a <__bad_interrupt>
      18:	28 c0       	rjmp	.+80     	; 0x6a <__bad_interrupt>
      1a:	27 c0       	rjmp	.+78     	; 0x6a <__bad_interrupt>
      1c:	26 c0       	rjmp	.+76     	; 0x6a <__bad_interrupt>
      1e:	25 c0       	rjmp	.+74     	; 0x6a <__bad_interrupt>
      20:	24 c0       	rjmp	.+72     	; 0x6a <__bad_interrupt>
      22:	e7 c1       	rjmp	.+974    	; 0x3f2 <__vector_17>
      24:	22 c0       	rjmp	.+68     	; 0x6a <__bad_interrupt>
      26:	21 c0       	rjmp	.+66     	; 0x6a <__bad_interrupt>
      28:	20 c0       	rjmp	.+64     	; 0x6a <__bad_interrupt>
      2a:	1f c0       	rjmp	.+62     	; 0x6a <__bad_interrupt>
      2c:	1e c0       	rjmp	.+60     	; 0x6a <__bad_interrupt>
      2e:	1d c0       	rjmp	.+58     	; 0x6a <__bad_interrupt>
      30:	1c c0       	rjmp	.+56     	; 0x6a <__bad_interrupt>
      32:	1b c0       	rjmp	.+54     	; 0x6a <__bad_interrupt>

00000034 <__ctors_end>:
      34:	11 24       	eor	r1, r1
      36:	1f be       	out	0x3f, r1	; 63
      38:	cf ef       	ldi	r28, 0xFF	; 255
      3a:	cd bf       	out	0x3d, r28	; 61
      3c:	df e3       	ldi	r29, 0x3F	; 63
      3e:	de bf       	out	0x3e, r29	; 62

00000040 <__do_copy_data>:
      40:	1e e3       	ldi	r17, 0x3E	; 62
      42:	a0 e0       	ldi	r26, 0x00	; 0
      44:	be e3       	ldi	r27, 0x3E	; 62
      46:	e4 ef       	ldi	r30, 0xF4	; 244
      48:	f4 e1       	ldi	r31, 0x14	; 20
      4a:	02 c0       	rjmp	.+4      	; 0x50 <__do_copy_data+0x10>
      4c:	05 90       	lpm	r0, Z+
      4e:	0d 92       	st	X+, r0
      50:	ac 34       	cpi	r26, 0x4C	; 76
      52:	b1 07       	cpc	r27, r17
      54:	d9 f7       	brne	.-10     	; 0x4c <__do_copy_data+0xc>

00000056 <__do_clear_bss>:
      56:	2e e3       	ldi	r18, 0x3E	; 62
      58:	ac e4       	ldi	r26, 0x4C	; 76
      5a:	be e3       	ldi	r27, 0x3E	; 62
      5c:	01 c0       	rjmp	.+2      	; 0x60 <.do_clear_bss_start>

0000005e <.do_clear_bss_loop>:
      5e:	1d 92       	st	X+, r1

00000060 <.do_clear_bss_start>:
      60:	ab 38       	cpi	r26, 0x8B	; 139
      62:	b2 07       	cpc	r27, r18
      64:	e1 f7       	brne	.-8      	; 0x5e <.do_clear_bss_loop>
      66:	66 d0       	rcall	.+204    	; 0x134 <main>
      68:	40 ca       	rjmp	.-2944   	; 0xfffff4ea <__eeprom_end+0xff7ef4ea>

0000006a <__bad_interrupt>:
      6a:	ca cf       	rjmp	.-108    	; 0x0 <__vectors>

0000006c <atmel_start_init>:
/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
	system_init();
      6c:	26 d2       	rcall	.+1100   	; 0x4ba <system_init>

	touch_init();
      6e:	46 d1       	rcall	.+652    	; 0x2fc <touch_init>
      70:	08 95       	ret

00000072 <__vector_6>:

#include <driver_init.h>
#include <compiler.h>

ISR(RTC_CNT_vect)
{
      72:	1f 92       	push	r1
      74:	0f 92       	push	r0
      76:	0f b6       	in	r0, 0x3f	; 63
      78:	0f 92       	push	r0
      7a:	11 24       	eor	r1, r1
      7c:	2f 93       	push	r18
      7e:	3f 93       	push	r19
      80:	4f 93       	push	r20
      82:	5f 93       	push	r21
      84:	6f 93       	push	r22
      86:	7f 93       	push	r23
      88:	8f 93       	push	r24
      8a:	9f 93       	push	r25
      8c:	af 93       	push	r26
      8e:	bf 93       	push	r27
      90:	ef 93       	push	r30
      92:	ff 93       	push	r31

	/* Insert your RTC Compare interrupt handling code */
	touch_timer_handler();
      94:	69 d1       	rcall	.+722    	; 0x368 <touch_timer_handler>

	/* Compare interrupt flag has to be cleared manually */
	RTC.INTFLAGS = RTC_CMP_bm;
      96:	82 e0       	ldi	r24, 0x02	; 2
      98:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <gain_setting_int_cap+0x7f6c55>
}
      9c:	ff 91       	pop	r31
      9e:	ef 91       	pop	r30
      a0:	bf 91       	pop	r27
      a2:	af 91       	pop	r26
      a4:	9f 91       	pop	r25
      a6:	8f 91       	pop	r24
      a8:	7f 91       	pop	r23
      aa:	6f 91       	pop	r22
      ac:	5f 91       	pop	r21
      ae:	4f 91       	pop	r20
      b0:	3f 91       	pop	r19
      b2:	2f 91       	pop	r18
      b4:	0f 90       	pop	r0
      b6:	0f be       	out	0x3f, r0	; 63
      b8:	0f 90       	pop	r0
      ba:	1f 90       	pop	r1
      bc:	18 95       	reti

000000be <touch_status_display>:
Output : none
Notes  : none
============================================================================*/
void touch_status_display(void)
{
	key_status = get_sensor_state(0) & KEY_TOUCHED_MASK;
      be:	80 e0       	ldi	r24, 0x00	; 0
      c0:	90 e0       	ldi	r25, 0x00	; 0
      c2:	88 d1       	rcall	.+784    	; 0x3d4 <get_sensor_state>
      c4:	80 78       	andi	r24, 0x80	; 128
      c6:	80 93 4c 3e 	sts	0x3E4C, r24	; 0x803e4c <__data_end>
	if (0u != key_status) {
      ca:	88 23       	and	r24, r24
      cc:	21 f0       	breq	.+8      	; 0xd6 <touch_status_display+0x18>
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
	} else {
		VPORTC.OUT &= ~(1 << pin);
      ce:	89 b1       	in	r24, 0x09	; 9
      d0:	8b 7f       	andi	r24, 0xFB	; 251
      d2:	89 b9       	out	0x09, r24	; 9
      d4:	03 c0       	rjmp	.+6      	; 0xdc <touch_status_display+0x1e>
 *                  false = Pin level set to "low" state
 */
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
      d6:	89 b1       	in	r24, 0x09	; 9
      d8:	84 60       	ori	r24, 0x04	; 4
      da:	89 b9       	out	0x09, r24	; 9
		LED_TOUCH1_set_level(0);
	} else{
		LED_TOUCH1_set_level(1);
	}
	key_status = get_sensor_state(1) & KEY_TOUCHED_MASK;
      dc:	81 e0       	ldi	r24, 0x01	; 1
      de:	90 e0       	ldi	r25, 0x00	; 0
      e0:	79 d1       	rcall	.+754    	; 0x3d4 <get_sensor_state>
      e2:	80 78       	andi	r24, 0x80	; 128
      e4:	80 93 4c 3e 	sts	0x3E4C, r24	; 0x803e4c <__data_end>
	if (0u != key_status) {
      e8:	88 23       	and	r24, r24
      ea:	21 f0       	breq	.+8      	; 0xf4 <touch_status_display+0x36>
	} else {
		VPORTC.OUT &= ~(1 << pin);
      ec:	89 b1       	in	r24, 0x09	; 9
      ee:	8d 7f       	andi	r24, 0xFD	; 253
      f0:	89 b9       	out	0x09, r24	; 9
      f2:	06 c0       	rjmp	.+12     	; 0x100 <touch_status_display+0x42>
 *                  false = Pin level set to "low" state
 */
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
      f4:	81 b1       	in	r24, 0x01	; 1
      f6:	84 60       	ori	r24, 0x04	; 4
      f8:	81 b9       	out	0x01, r24	; 1
 *                  false = Pin level set to "low" state
 */
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
      fa:	89 b1       	in	r24, 0x09	; 9
      fc:	82 60       	ori	r24, 0x02	; 2
      fe:	89 b9       	out	0x09, r24	; 9
		LED_TOUCH2_set_level(0);
	} else{
		BUTTON_MOD2_set_level(1);
		LED_TOUCH2_set_level(1);
	}
	key_status = get_sensor_state(2) & KEY_TOUCHED_MASK;
     100:	82 e0       	ldi	r24, 0x02	; 2
     102:	90 e0       	ldi	r25, 0x00	; 0
     104:	67 d1       	rcall	.+718    	; 0x3d4 <get_sensor_state>
     106:	80 78       	andi	r24, 0x80	; 128
     108:	80 93 4c 3e 	sts	0x3E4C, r24	; 0x803e4c <__data_end>
	if (0u != key_status) {
     10c:	88 23       	and	r24, r24
     10e:	21 f0       	breq	.+8      	; 0x118 <touch_status_display+0x5a>
	} else {
		VPORTC.OUT &= ~(1 << pin);
     110:	89 b1       	in	r24, 0x09	; 9
     112:	8e 7f       	andi	r24, 0xFE	; 254
     114:	89 b9       	out	0x09, r24	; 9
     116:	08 95       	ret
 *                  false = Pin level set to "low" state
 */
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
     118:	89 b1       	in	r24, 0x09	; 9
     11a:	81 60       	ori	r24, 0x01	; 1
     11c:	89 b9       	out	0x09, r24	; 9
     11e:	08 95       	ret

00000120 <touch_example>:
	 *
	 * Note: This is a sample file to provide reference on using touch status in a user application. This file is not
	 * linked to a project build.
	 */

	cpu_irq_enable(); /* Global Interrupt Enable */
     120:	78 94       	sei

	touch_process();
     122:	f2 d0       	rcall	.+484    	; 0x308 <touch_process>
	if (measurement_done_touch == 1) {
     124:	80 91 4f 3e 	lds	r24, 0x3E4F	; 0x803e4f <measurement_done_touch>
     128:	81 30       	cpi	r24, 0x01	; 1
     12a:	19 f4       	brne	.+6      	; 0x132 <touch_example+0x12>
		measurement_done_touch = 0;
     12c:	10 92 4f 3e 	sts	0x3E4F, r1	; 0x803e4f <measurement_done_touch>
		touch_status_display();
     130:	c6 df       	rcall	.-116    	; 0xbe <touch_status_display>
     132:	08 95       	ret

00000134 <main>:


int main(void)
{
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
     134:	9b df       	rcall	.-202    	; 0x6c <atmel_start_init>

	/* Replace with your application code */
	while (1) {
		touch_example();
     136:	f4 df       	rcall	.-24     	; 0x120 <touch_example>
     138:	fe cf       	rjmp	.-4      	; 0x136 <main+0x2>

0000013a <datastreamer_init>:
Input  : none
Output : none
Notes  :
============================================================================*/
void datastreamer_init(void)
{
     13a:	08 95       	ret

0000013c <datastreamer_transmit>:
Input  : Byte to be transmitted
Output : none
Notes  :
============================================================================*/
void datastreamer_transmit(uint8_t data_byte)
{
     13c:	cf 93       	push	r28
     13e:	c8 2f       	mov	r28, r24
	while (!USART_is_tx_ready())
     140:	20 d2       	rcall	.+1088   	; 0x582 <USART_is_tx_ready>
     142:	88 23       	and	r24, r24
     144:	e9 f3       	breq	.-6      	; 0x140 <datastreamer_transmit+0x4>
		;

	USART_write(data_byte);
     146:	8c 2f       	mov	r24, r28
     148:	2c d2       	rcall	.+1112   	; 0x5a2 <USART_write>

	while (USART_is_tx_busy())
     14a:	21 d2       	rcall	.+1090   	; 0x58e <USART_is_tx_busy>
     14c:	81 11       	cpse	r24, r1
     14e:	fd cf       	rjmp	.-6      	; 0x14a <datastreamer_transmit+0xe>
		;
}
     150:	cf 91       	pop	r28
     152:	08 95       	ret

00000154 <datastreamer_output>:
Output : none
Notes  : The data visualizer scripts that are generated in the project should be
         set on the data visualizer software.
============================================================================*/
void datastreamer_output(void)
{
     154:	0f 93       	push	r16
     156:	1f 93       	push	r17
     158:	cf 93       	push	r28
     15a:	df 93       	push	r29
     15c:	00 d0       	rcall	.+0      	; 0x15e <datastreamer_output+0xa>
     15e:	cd b7       	in	r28, 0x3d	; 61
     160:	de b7       	in	r29, 0x3e	; 62
	static uint8_t    sequence = 0u;
	uint16_t          u16temp_output;
	uint8_t           u8temp_output, send_header;
	volatile uint16_t count_bytes_out;

	send_header = sequence & (0x0f);
     162:	80 91 4d 3e 	lds	r24, 0x3E4D	; 0x803e4d <sequence.4065>
     166:	8f 70       	andi	r24, 0x0F	; 15
	if (send_header == 0) {
     168:	49 f0       	breq	.+18     	; 0x17c <datastreamer_output+0x28>
     16a:	0d c0       	rjmp	.+26     	; 0x186 <datastreamer_output+0x32>
		for (i = 0; i < sizeof(data); i++) {
			datastreamer_transmit(data[i]);
     16c:	f8 01       	movw	r30, r16
     16e:	e0 50       	subi	r30, 0x00	; 0
     170:	f2 4c       	sbci	r31, 0xC2	; 194
     172:	80 81       	ld	r24, Z
     174:	e3 df       	rcall	.-58     	; 0x13c <datastreamer_transmit>
	uint8_t           u8temp_output, send_header;
	volatile uint16_t count_bytes_out;

	send_header = sequence & (0x0f);
	if (send_header == 0) {
		for (i = 0; i < sizeof(data); i++) {
     176:	0f 5f       	subi	r16, 0xFF	; 255
     178:	1f 4f       	sbci	r17, 0xFF	; 255
     17a:	02 c0       	rjmp	.+4      	; 0x180 <datastreamer_output+0x2c>
     17c:	00 e0       	ldi	r16, 0x00	; 0
     17e:	10 e0       	ldi	r17, 0x00	; 0
     180:	03 31       	cpi	r16, 0x13	; 19
     182:	11 05       	cpc	r17, r1
     184:	98 f3       	brcs	.-26     	; 0x16c <datastreamer_output+0x18>
			datastreamer_transmit(data[i]);
		}
	}

	// Start token
	datastreamer_transmit(0x55);
     186:	85 e5       	ldi	r24, 0x55	; 85
     188:	d9 df       	rcall	.-78     	; 0x13c <datastreamer_transmit>

	// Frame Start
	datastreamer_transmit(sequence);
     18a:	80 91 4d 3e 	lds	r24, 0x3E4D	; 0x803e4d <sequence.4065>
     18e:	d6 df       	rcall	.-84     	; 0x13c <datastreamer_transmit>
	for (count_bytes_out = 0u; count_bytes_out < DEF_NUM_CHANNELS; count_bytes_out++) {
     190:	19 82       	std	Y+1, r1	; 0x01
     192:	1a 82       	std	Y+2, r1	; 0x02
     194:	3d c0       	rjmp	.+122    	; 0x210 <__DATA_REGION_LENGTH__+0x10>

		/* Signals */
		u16temp_output = get_sensor_node_signal(count_bytes_out);
     196:	89 81       	ldd	r24, Y+1	; 0x01
     198:	9a 81       	ldd	r25, Y+2	; 0x02
     19a:	f6 d0       	rcall	.+492    	; 0x388 <get_sensor_node_signal>
     19c:	19 2f       	mov	r17, r25
		datastreamer_transmit((uint8_t)u16temp_output);
     19e:	ce df       	rcall	.-100    	; 0x13c <datastreamer_transmit>
		datastreamer_transmit((uint8_t)(u16temp_output >> 8u));
     1a0:	81 2f       	mov	r24, r17
     1a2:	cc df       	rcall	.-104    	; 0x13c <datastreamer_transmit>

		/* Reference */
		u16temp_output = get_sensor_node_reference(count_bytes_out);
     1a4:	89 81       	ldd	r24, Y+1	; 0x01
     1a6:	9a 81       	ldd	r25, Y+2	; 0x02
     1a8:	fc d0       	rcall	.+504    	; 0x3a2 <get_sensor_node_reference>
     1aa:	19 2f       	mov	r17, r25
		datastreamer_transmit((uint8_t)u16temp_output);
     1ac:	c7 df       	rcall	.-114    	; 0x13c <datastreamer_transmit>
		datastreamer_transmit((uint8_t)(u16temp_output >> 8u));
     1ae:	81 2f       	mov	r24, r17
     1b0:	c5 df       	rcall	.-118    	; 0x13c <datastreamer_transmit>

		/* Touch delta */
		temp_int_calc = get_sensor_node_signal(count_bytes_out);
     1b2:	89 81       	ldd	r24, Y+1	; 0x01
     1b4:	9a 81       	ldd	r25, Y+2	; 0x02
     1b6:	e8 d0       	rcall	.+464    	; 0x388 <get_sensor_node_signal>
     1b8:	8c 01       	movw	r16, r24
		temp_int_calc -= get_sensor_node_reference(count_bytes_out);
     1ba:	89 81       	ldd	r24, Y+1	; 0x01
     1bc:	9a 81       	ldd	r25, Y+2	; 0x02
     1be:	f1 d0       	rcall	.+482    	; 0x3a2 <get_sensor_node_reference>
     1c0:	08 1b       	sub	r16, r24
     1c2:	19 0b       	sbc	r17, r25
		u16temp_output = (uint16_t)(temp_int_calc);
		datastreamer_transmit((uint8_t)u16temp_output);
     1c4:	80 2f       	mov	r24, r16
     1c6:	ba df       	rcall	.-140    	; 0x13c <datastreamer_transmit>
		datastreamer_transmit((uint8_t)(u16temp_output >> 8u));
     1c8:	81 2f       	mov	r24, r17
     1ca:	b8 df       	rcall	.-144    	; 0x13c <datastreamer_transmit>

		/* Comp Caps */
		u16temp_output = get_sensor_cc_val(count_bytes_out);
     1cc:	89 81       	ldd	r24, Y+1	; 0x01
     1ce:	9a 81       	ldd	r25, Y+2	; 0x02
     1d0:	f4 d0       	rcall	.+488    	; 0x3ba <get_sensor_cc_val>
     1d2:	19 2f       	mov	r17, r25
		datastreamer_transmit((uint8_t)u16temp_output);
     1d4:	b3 df       	rcall	.-154    	; 0x13c <datastreamer_transmit>
		datastreamer_transmit((uint8_t)(u16temp_output >> 8u));
     1d6:	81 2f       	mov	r24, r17
     1d8:	b1 df       	rcall	.-158    	; 0x13c <datastreamer_transmit>

		/* State */
		u8temp_output = get_sensor_state(count_bytes_out);
     1da:	89 81       	ldd	r24, Y+1	; 0x01
     1dc:	9a 81       	ldd	r25, Y+2	; 0x02
     1de:	fa d0       	rcall	.+500    	; 0x3d4 <get_sensor_state>
		if (0u != (u8temp_output & 0x80)) {
     1e0:	88 23       	and	r24, r24
     1e2:	1c f4       	brge	.+6      	; 0x1ea <datastreamer_output+0x96>
			datastreamer_transmit(0x01);
     1e4:	81 e0       	ldi	r24, 0x01	; 1
     1e6:	aa df       	rcall	.-172    	; 0x13c <datastreamer_transmit>
     1e8:	02 c0       	rjmp	.+4      	; 0x1ee <datastreamer_output+0x9a>
		} else {
			datastreamer_transmit(0x00);
     1ea:	80 e0       	ldi	r24, 0x00	; 0
     1ec:	a7 df       	rcall	.-178    	; 0x13c <datastreamer_transmit>
		}

		/* Threshold */
		datastreamer_transmit(qtlib_key_configs_set1[count_bytes_out].channel_threshold);
     1ee:	89 81       	ldd	r24, Y+1	; 0x01
     1f0:	9a 81       	ldd	r25, Y+2	; 0x02
     1f2:	fc 01       	movw	r30, r24
     1f4:	ee 0f       	add	r30, r30
     1f6:	ff 1f       	adc	r31, r31
     1f8:	8e 0f       	add	r24, r30
     1fa:	9f 1f       	adc	r25, r31
     1fc:	fc 01       	movw	r30, r24
     1fe:	e5 5e       	subi	r30, 0xE5	; 229
     200:	f1 4c       	sbci	r31, 0xC1	; 193
     202:	80 81       	ld	r24, Z
     204:	9b df       	rcall	.-202    	; 0x13c <datastreamer_transmit>
	// Start token
	datastreamer_transmit(0x55);

	// Frame Start
	datastreamer_transmit(sequence);
	for (count_bytes_out = 0u; count_bytes_out < DEF_NUM_CHANNELS; count_bytes_out++) {
     206:	89 81       	ldd	r24, Y+1	; 0x01
     208:	9a 81       	ldd	r25, Y+2	; 0x02
     20a:	01 96       	adiw	r24, 0x01	; 1
     20c:	89 83       	std	Y+1, r24	; 0x01
     20e:	9a 83       	std	Y+2, r25	; 0x02
     210:	89 81       	ldd	r24, Y+1	; 0x01
     212:	9a 81       	ldd	r25, Y+2	; 0x02
     214:	03 97       	sbiw	r24, 0x03	; 3
     216:	08 f4       	brcc	.+2      	; 0x21a <__DATA_REGION_LENGTH__+0x1a>
     218:	be cf       	rjmp	.-132    	; 0x196 <datastreamer_output+0x42>
		/* Threshold */
		datastreamer_transmit(qtlib_key_configs_set1[count_bytes_out].channel_threshold);
	}

	/* Other Debug Parameters */
	datastreamer_transmit(module_error_code);
     21a:	80 91 4e 3e 	lds	r24, 0x3E4E	; 0x803e4e <module_error_code>
     21e:	8e df       	rcall	.-228    	; 0x13c <datastreamer_transmit>

	/* Frame End */
	datastreamer_transmit(sequence++);
     220:	80 91 4d 3e 	lds	r24, 0x3E4D	; 0x803e4d <sequence.4065>
     224:	91 e0       	ldi	r25, 0x01	; 1
     226:	98 0f       	add	r25, r24
     228:	90 93 4d 3e 	sts	0x3E4D, r25	; 0x803e4d <sequence.4065>
     22c:	87 df       	rcall	.-242    	; 0x13c <datastreamer_transmit>

	/* End token */
	datastreamer_transmit(~0x55);
     22e:	8a ea       	ldi	r24, 0xAA	; 170
     230:	85 df       	rcall	.-246    	; 0x13c <datastreamer_transmit>
}
     232:	0f 90       	pop	r0
     234:	0f 90       	pop	r0
     236:	df 91       	pop	r29
     238:	cf 91       	pop	r28
     23a:	1f 91       	pop	r17
     23c:	0f 91       	pop	r16
     23e:	08 95       	ret

00000240 <touch_ptc_pin_config>:
{
	/* Calibrate Node */
	qtm_calibrate_sensor_node(&qtlib_acq_set1, sensor_node);
	/* Initialize key */
	qtm_init_sensor_key(&qtlib_key_set1, sensor_node, &ptc_qtlib_node_stat1[sensor_node]);
}
     240:	e4 e1       	ldi	r30, 0x14	; 20
     242:	f4 e0       	ldi	r31, 0x04	; 4
     244:	80 81       	ld	r24, Z
     246:	87 7f       	andi	r24, 0xF7	; 247
     248:	80 83       	st	Z, r24
     24a:	80 81       	ld	r24, Z
     24c:	88 7f       	andi	r24, 0xF8	; 248
     24e:	84 60       	ori	r24, 0x04	; 4
     250:	80 83       	st	Z, r24
     252:	e6 e1       	ldi	r30, 0x16	; 22
     254:	f4 e0       	ldi	r31, 0x04	; 4
     256:	80 81       	ld	r24, Z
     258:	87 7f       	andi	r24, 0xF7	; 247
     25a:	80 83       	st	Z, r24
     25c:	80 81       	ld	r24, Z
     25e:	88 7f       	andi	r24, 0xF8	; 248
     260:	84 60       	ori	r24, 0x04	; 4
     262:	80 83       	st	Z, r24
     264:	e5 e1       	ldi	r30, 0x15	; 21
     266:	f4 e0       	ldi	r31, 0x04	; 4
     268:	80 81       	ld	r24, Z
     26a:	87 7f       	andi	r24, 0xF7	; 247
     26c:	80 83       	st	Z, r24
     26e:	80 81       	ld	r24, Z
     270:	88 7f       	andi	r24, 0xF8	; 248
     272:	84 60       	ori	r24, 0x04	; 4
     274:	80 83       	st	Z, r24
     276:	08 95       	ret

00000278 <qtm_measure_complete_callback>:
     278:	81 e0       	ldi	r24, 0x01	; 1
     27a:	80 93 50 3e 	sts	0x3E50, r24	; 0x803e50 <touch_postprocess_request>
     27e:	08 95       	ret

00000280 <touch_sensors_config>:
     280:	cf 93       	push	r28
     282:	df 93       	push	r29
     284:	8e e2       	ldi	r24, 0x2E	; 46
     286:	9e e3       	ldi	r25, 0x3E	; 62
     288:	00 d8       	rcall	.-4096   	; 0xfffff28a <__eeprom_end+0xff7ef28a>
     28a:	8f e6       	ldi	r24, 0x6F	; 111
     28c:	9e e3       	ldi	r25, 0x3E	; 62
     28e:	35 d8       	rcall	.-3990   	; 0xfffff2fa <__eeprom_end+0xff7ef2fa>
     290:	c0 e0       	ldi	r28, 0x00	; 0
     292:	d0 e0       	ldi	r29, 0x00	; 0
     294:	09 c0       	rjmp	.+18     	; 0x2a8 <touch_sensors_config+0x28>
     296:	be 01       	movw	r22, r28
     298:	8e e2       	ldi	r24, 0x2E	; 46
     29a:	9e e3       	ldi	r25, 0x3E	; 62
     29c:	9c d8       	rcall	.-3784   	; 0xfffff3d6 <__eeprom_end+0xff7ef3d6>
     29e:	be 01       	movw	r22, r28
     2a0:	8e e2       	ldi	r24, 0x2E	; 46
     2a2:	9e e3       	ldi	r25, 0x3E	; 62
     2a4:	b7 d8       	rcall	.-3730   	; 0xfffff414 <__eeprom_end+0xff7ef414>
     2a6:	21 96       	adiw	r28, 0x01	; 1
     2a8:	c3 30       	cpi	r28, 0x03	; 3
     2aa:	d1 05       	cpc	r29, r1
     2ac:	a0 f3       	brcs	.-24     	; 0x296 <touch_sensors_config+0x16>
     2ae:	c0 e0       	ldi	r28, 0x00	; 0
     2b0:	d0 e0       	ldi	r29, 0x00	; 0
     2b2:	0e c0       	rjmp	.+28     	; 0x2d0 <touch_sensors_config+0x50>
     2b4:	ae 01       	movw	r20, r28
     2b6:	44 0f       	add	r20, r20
     2b8:	55 1f       	adc	r21, r21
     2ba:	44 0f       	add	r20, r20
     2bc:	55 1f       	adc	r21, r21
     2be:	4c 0f       	add	r20, r28
     2c0:	5d 1f       	adc	r21, r29
     2c2:	40 5a       	subi	r20, 0xA0	; 160
     2c4:	51 4c       	sbci	r21, 0xC1	; 193
     2c6:	6c 2f       	mov	r22, r28
     2c8:	83 e1       	ldi	r24, 0x13	; 19
     2ca:	9e e3       	ldi	r25, 0x3E	; 62
     2cc:	e5 d1       	rcall	.+970    	; 0x698 <qtm_init_sensor_key>
     2ce:	21 96       	adiw	r28, 0x01	; 1
     2d0:	c3 30       	cpi	r28, 0x03	; 3
     2d2:	d1 05       	cpc	r29, r1
     2d4:	78 f3       	brcs	.-34     	; 0x2b4 <touch_sensors_config+0x34>
     2d6:	80 e0       	ldi	r24, 0x00	; 0
     2d8:	df 91       	pop	r29
     2da:	cf 91       	pop	r28
     2dc:	08 95       	ret

000002de <qtm_error_callback>:
     2de:	8f 5f       	subi	r24, 0xFF	; 255
     2e0:	80 93 4e 3e 	sts	0x3E4E, r24	; 0x803e4e <module_error_code>
     2e4:	37 df       	rcall	.-402    	; 0x154 <datastreamer_output>
     2e6:	08 95       	ret

000002e8 <Timer_set_period>:
     2e8:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <gain_setting_int_cap+0x7f6c53>
     2ec:	92 fd       	sbrc	r25, 2
     2ee:	fc cf       	rjmp	.-8      	; 0x2e8 <Timer_set_period>
     2f0:	90 e0       	ldi	r25, 0x00	; 0
     2f2:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <gain_setting_int_cap+0x7f6c5c>
     2f6:	90 93 4b 01 	sts	0x014B, r25	; 0x80014b <gain_setting_int_cap+0x7f6c5d>
     2fa:	08 95       	ret

000002fc <touch_init>:
     2fc:	80 e2       	ldi	r24, 0x20	; 32
     2fe:	f4 df       	rcall	.-24     	; 0x2e8 <Timer_set_period>
     300:	9f df       	rcall	.-194    	; 0x240 <touch_ptc_pin_config>
     302:	be df       	rcall	.-132    	; 0x280 <touch_sensors_config>
     304:	1a df       	rcall	.-460    	; 0x13a <datastreamer_init>
     306:	08 95       	ret

00000308 <touch_process>:
     308:	80 91 51 3e 	lds	r24, 0x3E51	; 0x803e51 <time_to_measure_touch_flag>
     30c:	81 30       	cpi	r24, 0x01	; 1
     30e:	49 f4       	brne	.+18     	; 0x322 <touch_process+0x1a>
     310:	6c e3       	ldi	r22, 0x3C	; 60
     312:	71 e0       	ldi	r23, 0x01	; 1
     314:	8e e2       	ldi	r24, 0x2E	; 46
     316:	9e e3       	ldi	r25, 0x3E	; 62
     318:	fa d7       	rcall	.+4084   	; 0x130e <qtm_ptc_start_measurement_seq>
     31a:	81 11       	cpse	r24, r1
     31c:	02 c0       	rjmp	.+4      	; 0x322 <touch_process+0x1a>
     31e:	10 92 51 3e 	sts	0x3E51, r1	; 0x803e51 <time_to_measure_touch_flag>
     322:	80 91 50 3e 	lds	r24, 0x3E50	; 0x803e50 <touch_postprocess_request>
     326:	81 30       	cpi	r24, 0x01	; 1
     328:	f1 f4       	brne	.+60     	; 0x366 <touch_process+0x5e>
     32a:	10 92 50 3e 	sts	0x3E50, r1	; 0x803e50 <touch_postprocess_request>
     32e:	2f d6       	rcall	.+3166   	; 0xf8e <qtm_acquisition_process>
     330:	81 11       	cpse	r24, r1
     332:	08 c0       	rjmp	.+16     	; 0x344 <touch_process+0x3c>
     334:	83 e1       	ldi	r24, 0x13	; 19
     336:	9e e3       	ldi	r25, 0x3E	; 62
     338:	ce d1       	rcall	.+924    	; 0x6d6 <qtm_key_sensors_process>
     33a:	88 23       	and	r24, r24
     33c:	29 f0       	breq	.+10     	; 0x348 <touch_process+0x40>
     33e:	81 e0       	ldi	r24, 0x01	; 1
     340:	ce df       	rcall	.-100    	; 0x2de <qtm_error_callback>
     342:	02 c0       	rjmp	.+4      	; 0x348 <touch_process+0x40>
     344:	80 e0       	ldi	r24, 0x00	; 0
     346:	cb df       	rcall	.-106    	; 0x2de <qtm_error_callback>
     348:	e0 91 13 3e 	lds	r30, 0x3E13	; 0x803e13 <qtlib_key_set1>
     34c:	f0 91 14 3e 	lds	r31, 0x3E14	; 0x803e14 <qtlib_key_set1+0x1>
     350:	80 81       	ld	r24, Z
     352:	88 23       	and	r24, r24
     354:	24 f4       	brge	.+8      	; 0x35e <touch_process+0x56>
     356:	81 e0       	ldi	r24, 0x01	; 1
     358:	80 93 51 3e 	sts	0x3E51, r24	; 0x803e51 <time_to_measure_touch_flag>
     35c:	03 c0       	rjmp	.+6      	; 0x364 <touch_process+0x5c>
     35e:	81 e0       	ldi	r24, 0x01	; 1
     360:	80 93 4f 3e 	sts	0x3E4F, r24	; 0x803e4f <measurement_done_touch>
     364:	f7 de       	rcall	.-530    	; 0x154 <datastreamer_output>
     366:	08 95       	ret

00000368 <touch_timer_handler>:
     368:	80 91 5f 3e 	lds	r24, 0x3E5F	; 0x803e5f <interrupt_cnt>
     36c:	8f 5f       	subi	r24, 0xFF	; 255
     36e:	80 93 5f 3e 	sts	0x3E5F, r24	; 0x803e5f <interrupt_cnt>
     372:	84 31       	cpi	r24, 0x14	; 20
     374:	40 f0       	brcs	.+16     	; 0x386 <touch_timer_handler+0x1e>
     376:	10 92 5f 3e 	sts	0x3E5F, r1	; 0x803e5f <interrupt_cnt>
     37a:	81 e0       	ldi	r24, 0x01	; 1
     37c:	80 93 51 3e 	sts	0x3E51, r24	; 0x803e51 <time_to_measure_touch_flag>
     380:	84 e1       	ldi	r24, 0x14	; 20
     382:	90 e0       	ldi	r25, 0x00	; 0
     384:	7e d1       	rcall	.+764    	; 0x682 <qtm_update_qtlib_timer>
     386:	08 95       	ret

00000388 <get_sensor_node_signal>:
     388:	fc 01       	movw	r30, r24
     38a:	ee 0f       	add	r30, r30
     38c:	ff 1f       	adc	r31, r31
     38e:	ee 0f       	add	r30, r30
     390:	ff 1f       	adc	r31, r31
     392:	8e 0f       	add	r24, r30
     394:	9f 1f       	adc	r25, r31
     396:	fc 01       	movw	r30, r24
     398:	e0 5a       	subi	r30, 0xA0	; 160
     39a:	f1 4c       	sbci	r31, 0xC1	; 193
     39c:	81 81       	ldd	r24, Z+1	; 0x01
     39e:	92 81       	ldd	r25, Z+2	; 0x02
     3a0:	08 95       	ret

000003a2 <get_sensor_node_reference>:
     3a2:	fc 01       	movw	r30, r24
     3a4:	ee 0f       	add	r30, r30
     3a6:	ff 1f       	adc	r31, r31
     3a8:	e8 0f       	add	r30, r24
     3aa:	f9 1f       	adc	r31, r25
     3ac:	ee 0f       	add	r30, r30
     3ae:	ff 1f       	adc	r31, r31
     3b0:	eb 58       	subi	r30, 0x8B	; 139
     3b2:	f1 4c       	sbci	r31, 0xC1	; 193
     3b4:	84 81       	ldd	r24, Z+4	; 0x04
     3b6:	95 81       	ldd	r25, Z+5	; 0x05
     3b8:	08 95       	ret

000003ba <get_sensor_cc_val>:
     3ba:	fc 01       	movw	r30, r24
     3bc:	ee 0f       	add	r30, r30
     3be:	ff 1f       	adc	r31, r31
     3c0:	ee 0f       	add	r30, r30
     3c2:	ff 1f       	adc	r31, r31
     3c4:	8e 0f       	add	r24, r30
     3c6:	9f 1f       	adc	r25, r31
     3c8:	fc 01       	movw	r30, r24
     3ca:	e0 5a       	subi	r30, 0xA0	; 160
     3cc:	f1 4c       	sbci	r31, 0xC1	; 193
     3ce:	83 81       	ldd	r24, Z+3	; 0x03
     3d0:	94 81       	ldd	r25, Z+4	; 0x04
     3d2:	08 95       	ret

000003d4 <get_sensor_state>:
     3d4:	e0 91 17 3e 	lds	r30, 0x3E17	; 0x803e17 <qtlib_key_set1+0x4>
     3d8:	f0 91 18 3e 	lds	r31, 0x3E18	; 0x803e18 <qtlib_key_set1+0x5>
     3dc:	9c 01       	movw	r18, r24
     3de:	22 0f       	add	r18, r18
     3e0:	33 1f       	adc	r19, r19
     3e2:	82 0f       	add	r24, r18
     3e4:	93 1f       	adc	r25, r19
     3e6:	88 0f       	add	r24, r24
     3e8:	99 1f       	adc	r25, r25
     3ea:	e8 0f       	add	r30, r24
     3ec:	f9 1f       	adc	r31, r25
     3ee:	80 81       	ld	r24, Z
     3f0:	08 95       	ret

000003f2 <__vector_17>:
Input    :  none
Output  :  none
Notes    :  none
============================================================================*/
ISR(ADC0_RESRDY_vect)
{
     3f2:	1f 92       	push	r1
     3f4:	0f 92       	push	r0
     3f6:	0f b6       	in	r0, 0x3f	; 63
     3f8:	0f 92       	push	r0
     3fa:	11 24       	eor	r1, r1
     3fc:	2f 93       	push	r18
     3fe:	3f 93       	push	r19
     400:	4f 93       	push	r20
     402:	5f 93       	push	r21
     404:	6f 93       	push	r22
     406:	7f 93       	push	r23
     408:	8f 93       	push	r24
     40a:	9f 93       	push	r25
     40c:	af 93       	push	r26
     40e:	bf 93       	push	r27
     410:	ef 93       	push	r30
     412:	ff 93       	push	r31
	qtm_t81x_ptc_handler_eoc();
     414:	40 d8       	rcall	.-3968   	; 0xfffff496 <__eeprom_end+0xff7ef496>
}
     416:	ff 91       	pop	r31
     418:	ef 91       	pop	r30
     41a:	bf 91       	pop	r27
     41c:	af 91       	pop	r26
     41e:	9f 91       	pop	r25
     420:	8f 91       	pop	r24
     422:	7f 91       	pop	r23
     424:	6f 91       	pop	r22
     426:	5f 91       	pop	r21
     428:	4f 91       	pop	r20
     42a:	3f 91       	pop	r19
     42c:	2f 91       	pop	r18
     42e:	0f 90       	pop	r0
     430:	0f be       	out	0x3f, r0	; 63
     432:	0f 90       	pop	r0
     434:	1f 90       	pop	r1
     436:	18 95       	reti

00000438 <BOD_init>:
	//		 | BOD_VLMCFG_BELOW_gc; /* Interrupt when supply goes below VLM level */

	// BOD.VLMCTRLA = BOD_VLMLVL_5ABOVE_gc; /* VLM threshold 5% above BOD level */

	return 0;
}
     438:	80 e0       	ldi	r24, 0x00	; 0
     43a:	08 95       	ret

0000043c <CLKCTRL_init>:
 *       on calling convention. The memory model is not visible to the
 *       preprocessor, so it must be defined in the Assembler preprocessor directives.
 */
static inline void ccp_write_io(void *addr, uint8_t value)
{
	protected_write_io(addr, CCP_IOREG_gc, value);
     43c:	40 e0       	ldi	r20, 0x00	; 0
     43e:	68 ed       	ldi	r22, 0xD8	; 216
     440:	81 e6       	ldi	r24, 0x61	; 97
     442:	90 e0       	ldi	r25, 0x00	; 0
     444:	82 d0       	rcall	.+260    	; 0x54a <protected_write_io>
	//		 | 0 << CLKCTRL_CLKOUT_bp /* System clock out: disabled */);

	// ccp_write_io((void*)&(CLKCTRL.MCLKLOCK),0 << CLKCTRL_LOCKEN_bp /* lock enable: disabled */);

	return 0;
}
     446:	80 e0       	ldi	r24, 0x00	; 0
     448:	08 95       	ret

0000044a <CPUINT_init>:

	// CPUINT.LVL0PRI = 0x0 << CPUINT_LVL0PRI_gp; /* Interrupt Level Priority: 0x0 */

	// CPUINT.LVL1VEC = 0x0 << CPUINT_LVL1VEC_gp; /* Interrupt Vector with High Priority: 0x0 */

	ENABLE_INTERRUPTS();
     44a:	78 94       	sei

	return 0;
}
     44c:	80 e0       	ldi	r24, 0x00	; 0
     44e:	08 95       	ret

00000450 <mcu_init>:
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
     450:	80 e0       	ldi	r24, 0x00	; 0
     452:	08 c0       	rjmp	.+16     	; 0x464 <mcu_init+0x14>
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
     454:	e8 2f       	mov	r30, r24
     456:	f0 e0       	ldi	r31, 0x00	; 0
     458:	e0 5f       	subi	r30, 0xF0	; 240
     45a:	fb 4f       	sbci	r31, 0xFB	; 251
     45c:	90 81       	ld	r25, Z
     45e:	98 60       	ori	r25, 0x08	; 8
     460:	90 83       	st	Z, r25
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
     462:	8f 5f       	subi	r24, 0xFF	; 255
     464:	88 30       	cpi	r24, 0x08	; 8
     466:	b0 f3       	brcs	.-20     	; 0x454 <mcu_init+0x4>
     468:	80 e0       	ldi	r24, 0x00	; 0
     46a:	08 c0       	rjmp	.+16     	; 0x47c <mcu_init+0x2c>
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
     46c:	e8 2f       	mov	r30, r24
     46e:	f0 e0       	ldi	r31, 0x00	; 0
     470:	e0 5d       	subi	r30, 0xD0	; 208
     472:	fb 4f       	sbci	r31, 0xFB	; 251
     474:	90 81       	ld	r25, Z
     476:	98 60       	ori	r25, 0x08	; 8
     478:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
     47a:	8f 5f       	subi	r24, 0xFF	; 255
     47c:	88 30       	cpi	r24, 0x08	; 8
     47e:	b0 f3       	brcs	.-20     	; 0x46c <mcu_init+0x1c>
     480:	80 e0       	ldi	r24, 0x00	; 0
     482:	08 c0       	rjmp	.+16     	; 0x494 <mcu_init+0x44>
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
     484:	e8 2f       	mov	r30, r24
     486:	f0 e0       	ldi	r31, 0x00	; 0
     488:	e0 5b       	subi	r30, 0xB0	; 176
     48a:	fb 4f       	sbci	r31, 0xFB	; 251
     48c:	90 81       	ld	r25, Z
     48e:	98 60       	ori	r25, 0x08	; 8
     490:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
     492:	8f 5f       	subi	r24, 0xFF	; 255
     494:	88 30       	cpi	r24, 0x08	; 8
     496:	b0 f3       	brcs	.-20     	; 0x484 <mcu_init+0x34>
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}
}
     498:	08 95       	ret

0000049a <USART_initialization>:
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
	} else {
		VPORTB.OUT &= ~(1 << pin);
     49a:	85 b1       	in	r24, 0x05	; 5
     49c:	87 7f       	andi	r24, 0xF7	; 247
     49e:	85 b9       	out	0x05, r24	; 5
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTB.DIR |= (1 << pin);
     4a0:	84 b1       	in	r24, 0x04	; 4
     4a2:	88 60       	ori	r24, 0x08	; 8
     4a4:	84 b9       	out	0x04, r24	; 4
 */
static inline void PORTB_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
     4a6:	84 b1       	in	r24, 0x04	; 4
     4a8:	8b 7f       	andi	r24, 0xFB	; 251
     4aa:	84 b9       	out	0x04, r24	; 4
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
     4ac:	e2 e3       	ldi	r30, 0x32	; 50
     4ae:	f4 e0       	ldi	r31, 0x04	; 4
     4b0:	80 81       	ld	r24, Z
     4b2:	87 7f       	andi	r24, 0xF7	; 247
     4b4:	80 83       	st	Z, r24
	    // <id> pad_pull_config
	    // <PORT_PULL_OFF"> Off
	    // <PORT_PULL_UP"> Pull-up
	    PORT_PULL_OFF);

	USART_init();
     4b6:	5b d0       	rcall	.+182    	; 0x56e <USART_init>
     4b8:	08 95       	ret

000004ba <system_init>:
/**
 * \brief System initialization
 */
void system_init()
{
	mcu_init();
     4ba:	ca df       	rcall	.-108    	; 0x450 <mcu_init>
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
     4bc:	81 b1       	in	r24, 0x01	; 1
     4be:	8d 7f       	andi	r24, 0xFD	; 253
     4c0:	81 b9       	out	0x01, r24	; 1
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
     4c2:	80 b1       	in	r24, 0x00	; 0
     4c4:	82 60       	ori	r24, 0x02	; 2
     4c6:	80 b9       	out	0x00, r24	; 0
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
     4c8:	81 b1       	in	r24, 0x01	; 1
     4ca:	8b 7f       	andi	r24, 0xFB	; 251
     4cc:	81 b9       	out	0x01, r24	; 1
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
     4ce:	80 b1       	in	r24, 0x00	; 0
     4d0:	84 60       	ori	r24, 0x04	; 4
     4d2:	80 b9       	out	0x00, r24	; 0
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
     4d4:	81 b1       	in	r24, 0x01	; 1
     4d6:	87 7f       	andi	r24, 0xF7	; 247
     4d8:	81 b9       	out	0x01, r24	; 1
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
     4da:	80 b1       	in	r24, 0x00	; 0
     4dc:	88 60       	ori	r24, 0x08	; 8
     4de:	80 b9       	out	0x00, r24	; 0
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
     4e0:	80 b1       	in	r24, 0x00	; 0
     4e2:	8f 77       	andi	r24, 0x7F	; 127
     4e4:	80 b9       	out	0x00, r24	; 0
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
     4e6:	e7 e1       	ldi	r30, 0x17	; 23
     4e8:	f4 e0       	ldi	r31, 0x04	; 4
     4ea:	80 81       	ld	r24, Z
     4ec:	87 7f       	andi	r24, 0xF7	; 247
     4ee:	80 83       	st	Z, r24
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
	} else {
		VPORTB.OUT &= ~(1 << pin);
     4f0:	85 b1       	in	r24, 0x05	; 5
     4f2:	8d 7f       	andi	r24, 0xFD	; 253
     4f4:	85 b9       	out	0x05, r24	; 5
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTB.DIR |= (1 << pin);
     4f6:	84 b1       	in	r24, 0x04	; 4
     4f8:	82 60       	ori	r24, 0x02	; 2
     4fa:	84 b9       	out	0x04, r24	; 4
 */
static inline void PORTB_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
     4fc:	84 b1       	in	r24, 0x04	; 4
     4fe:	8f 7e       	andi	r24, 0xEF	; 239
     500:	84 b9       	out	0x04, r24	; 4
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
     502:	e4 e3       	ldi	r30, 0x34	; 52
     504:	f4 e0       	ldi	r31, 0x04	; 4
     506:	80 81       	ld	r24, Z
     508:	87 7f       	andi	r24, 0xF7	; 247
     50a:	80 83       	st	Z, r24
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
	} else {
		VPORTB.OUT &= ~(1 << pin);
     50c:	85 b1       	in	r24, 0x05	; 5
     50e:	8f 7d       	andi	r24, 0xDF	; 223
     510:	85 b9       	out	0x05, r24	; 5
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTB.DIR |= (1 << pin);
     512:	84 b1       	in	r24, 0x04	; 4
     514:	80 62       	ori	r24, 0x20	; 32
     516:	84 b9       	out	0x04, r24	; 4
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
	} else {
		VPORTC.OUT &= ~(1 << pin);
     518:	89 b1       	in	r24, 0x09	; 9
     51a:	8e 7f       	andi	r24, 0xFE	; 254
     51c:	89 b9       	out	0x09, r24	; 9
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTC.DIR |= (1 << pin);
     51e:	88 b1       	in	r24, 0x08	; 8
     520:	81 60       	ori	r24, 0x01	; 1
     522:	88 b9       	out	0x08, r24	; 8
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
	} else {
		VPORTC.OUT &= ~(1 << pin);
     524:	89 b1       	in	r24, 0x09	; 9
     526:	8d 7f       	andi	r24, 0xFD	; 253
     528:	89 b9       	out	0x09, r24	; 9
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTC.DIR |= (1 << pin);
     52a:	88 b1       	in	r24, 0x08	; 8
     52c:	82 60       	ori	r24, 0x02	; 2
     52e:	88 b9       	out	0x08, r24	; 8
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
	} else {
		VPORTC.OUT &= ~(1 << pin);
     530:	89 b1       	in	r24, 0x09	; 9
     532:	8b 7f       	andi	r24, 0xFB	; 251
     534:	89 b9       	out	0x09, r24	; 9
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTC.DIR |= (1 << pin);
     536:	88 b1       	in	r24, 0x08	; 8
     538:	84 60       	ori	r24, 0x04	; 4
     53a:	88 b9       	out	0x08, r24	; 8
	    // <true"> High
	    false);

	LED_TOUCH1_set_dir(PORT_DIR_OUT);

	CLKCTRL_init();
     53c:	7f df       	rcall	.-258    	; 0x43c <CLKCTRL_init>

	Timer_init();
     53e:	09 d0       	rcall	.+18     	; 0x552 <Timer_init>

	USART_initialization();
     540:	ac df       	rcall	.-168    	; 0x49a <USART_initialization>

	CPUINT_init();
     542:	83 df       	rcall	.-250    	; 0x44a <CPUINT_init>

	SLPCTRL_init();
     544:	12 d0       	rcall	.+36     	; 0x56a <SLPCTRL_init>

	BOD_init();
     546:	78 df       	rcall	.-272    	; 0x438 <BOD_init>
     548:	08 95       	ret

0000054a <protected_write_io>:
#if defined(__GNUC__)
  
#ifdef RAMPZ
	out     _SFR_IO_ADDR(RAMPZ), r1         // Clear bits 23:16 of Z
#endif
	movw    r30, r24                // Load addr into Z
     54a:	fc 01       	movw	r30, r24
	out     CCP, r22                // Start CCP handshake
     54c:	64 bf       	out	0x34, r22	; 52
	st      Z, r20                  // Write value to I/O register
     54e:	40 83       	st	Z, r20
	ret                             // Return to caller
     550:	08 95       	ret

00000552 <Timer_init>:
 * \return Initialization status.
 */
int8_t Timer_init()
{

	while (RTC.STATUS > 0) { /* Wait for all register to be synchronized */
     552:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <gain_setting_int_cap+0x7f6c53>
     556:	81 11       	cpse	r24, r1
     558:	fc cf       	rjmp	.-8      	; 0x552 <Timer_init>

	// RTC.CMP = 0x0; /* Compare: 0x0 */

	// RTC.CNT = 0x0; /* Counter: 0x0 */

	RTC.CTRLA = RTC_PRESCALER_DIV1_gc   /* 1 */
     55a:	e0 e4       	ldi	r30, 0x40	; 64
     55c:	f1 e0       	ldi	r31, 0x01	; 1
     55e:	81 e8       	ldi	r24, 0x81	; 129
     560:	80 83       	st	Z, r24

	// RTC.CLKSEL = RTC_CLKSEL_INT32K_gc; /* 32KHz Internal Ultra Low Power Oscillator (OSCULP32K) */

	// RTC.DBGCTRL = 0 << RTC_DBGRUN_bp; /* Run in debug: disabled */

	RTC.INTCTRL = 1 << RTC_CMP_bp    /* Compare Match Interrupt enable: enabled */
     562:	82 e0       	ldi	r24, 0x02	; 2
     564:	82 83       	std	Z+2, r24	; 0x02
	// RTC.PITDBGCTRL = 0 << RTC_DBGRUN_bp; /* Run in debug: disabled */

	// RTC.PITINTCTRL = 0 << RTC_PI_bp; /* Periodic Interrupt: disabled */

	return 0;
}
     566:	80 e0       	ldi	r24, 0x00	; 0
     568:	08 95       	ret

0000056a <SLPCTRL_init>:

	// SLPCTRL.CTRLA = 0 << SLPCTRL_SEN_bp /* Sleep enable: disabled */
	//		 | SLPCTRL_SMODE_IDLE_gc; /* Idle mode */

	return 0;
}
     56a:	80 e0       	ldi	r24, 0x00	; 0
     56c:	08 95       	ret

0000056e <USART_init>:
uint8_t USART_read()
{
	while (!(USART0.STATUS & USART_RXCIF_bm))
		;
	return USART0.RXDATAL;
}
     56e:	e0 e0       	ldi	r30, 0x00	; 0
     570:	f8 e0       	ldi	r31, 0x08	; 8
     572:	83 e2       	ldi	r24, 0x23	; 35
     574:	98 e0       	ldi	r25, 0x08	; 8
     576:	80 87       	std	Z+8, r24	; 0x08
     578:	91 87       	std	Z+9, r25	; 0x09
     57a:	80 ec       	ldi	r24, 0xC0	; 192
     57c:	86 83       	std	Z+6, r24	; 0x06
     57e:	80 e0       	ldi	r24, 0x00	; 0
     580:	08 95       	ret

00000582 <USART_is_tx_ready>:
     582:	80 91 04 08 	lds	r24, 0x0804	; 0x800804 <gain_setting_int_cap+0x7f7316>
     586:	85 fb       	bst	r24, 5
     588:	88 27       	eor	r24, r24
     58a:	80 f9       	bld	r24, 0
     58c:	08 95       	ret

0000058e <USART_is_tx_busy>:
     58e:	80 91 04 08 	lds	r24, 0x0804	; 0x800804 <gain_setting_int_cap+0x7f7316>
     592:	82 95       	swap	r24
     594:	86 95       	lsr	r24
     596:	86 95       	lsr	r24
     598:	83 70       	andi	r24, 0x03	; 3
     59a:	91 e0       	ldi	r25, 0x01	; 1
     59c:	89 27       	eor	r24, r25
     59e:	81 70       	andi	r24, 0x01	; 1
     5a0:	08 95       	ret

000005a2 <USART_write>:
 *
 * \return Nothing
 */
void USART_write(const uint8_t data)
{
	while (!(USART0.STATUS & USART_DREIF_bm))
     5a2:	90 91 04 08 	lds	r25, 0x0804	; 0x800804 <gain_setting_int_cap+0x7f7316>
     5a6:	95 ff       	sbrs	r25, 5
     5a8:	fc cf       	rjmp	.-8      	; 0x5a2 <USART_write>
		;
	USART0.TXDATAL = data;
     5aa:	80 93 02 08 	sts	0x0802, r24	; 0x800802 <gain_setting_int_cap+0x7f7314>
     5ae:	08 95       	ret

000005b0 <check_for_aks_block>:
     5b0:	cf 92       	push	r12
     5b2:	df 92       	push	r13
     5b4:	ff 92       	push	r15
     5b6:	0f 93       	push	r16
     5b8:	1f 93       	push	r17
     5ba:	cf 93       	push	r28
     5bc:	df 93       	push	r29
     5be:	ec 01       	movw	r28, r24
     5c0:	ae 81       	ldd	r26, Y+6	; 0x06
     5c2:	bf 81       	ldd	r27, Y+7	; 0x07
     5c4:	eb 01       	movw	r28, r22
     5c6:	cc 0f       	add	r28, r28
     5c8:	dd 1f       	adc	r29, r29
     5ca:	c6 0f       	add	r28, r22
     5cc:	d7 1f       	adc	r29, r23
     5ce:	ca 0f       	add	r28, r26
     5d0:	db 1f       	adc	r29, r27
     5d2:	fa 80       	ldd	r15, Y+2	; 0x02
     5d4:	fc 01       	movw	r30, r24
     5d6:	44 81       	ldd	r20, Z+4	; 0x04
     5d8:	55 81       	ldd	r21, Z+5	; 0x05
     5da:	e6 e0       	ldi	r30, 0x06	; 6
     5dc:	e6 9f       	mul	r30, r22
     5de:	90 01       	movw	r18, r0
     5e0:	e7 9f       	mul	r30, r23
     5e2:	30 0d       	add	r19, r0
     5e4:	11 24       	eor	r1, r1
     5e6:	8a 01       	movw	r16, r20
     5e8:	02 0f       	add	r16, r18
     5ea:	13 1f       	adc	r17, r19
     5ec:	f8 01       	movw	r30, r16
     5ee:	22 81       	ldd	r18, Z+2	; 0x02
     5f0:	33 81       	ldd	r19, Z+3	; 0x03
     5f2:	f9 01       	movw	r30, r18
     5f4:	21 81       	ldd	r18, Z+1	; 0x01
     5f6:	32 81       	ldd	r19, Z+2	; 0x02
     5f8:	f8 01       	movw	r30, r16
     5fa:	04 81       	ldd	r16, Z+4	; 0x04
     5fc:	15 81       	ldd	r17, Z+5	; 0x05
     5fe:	20 1b       	sub	r18, r16
     600:	31 0b       	sbc	r19, r17
     602:	e8 81       	ld	r30, Y
     604:	2e 1b       	sub	r18, r30
     606:	31 09       	sbc	r19, r1
     608:	ec 01       	movw	r28, r24
     60a:	ea 81       	ldd	r30, Y+2	; 0x02
     60c:	fb 81       	ldd	r31, Y+3	; 0x03
     60e:	00 81       	ld	r16, Z
     610:	11 81       	ldd	r17, Z+1	; 0x01
     612:	fa 01       	movw	r30, r20
     614:	40 e0       	ldi	r20, 0x00	; 0
     616:	50 e0       	ldi	r21, 0x00	; 0
     618:	40 17       	cp	r20, r16
     61a:	51 07       	cpc	r21, r17
     61c:	39 f1       	breq	.+78     	; 0x66c <check_for_aks_block+0xbc>
     61e:	46 17       	cp	r20, r22
     620:	57 07       	cpc	r21, r23
     622:	f9 f0       	breq	.+62     	; 0x662 <check_for_aks_block+0xb2>
     624:	12 96       	adiw	r26, 0x02	; 2
     626:	8c 91       	ld	r24, X
     628:	12 97       	sbiw	r26, 0x02	; 2
     62a:	f8 12       	cpse	r15, r24
     62c:	1a c0       	rjmp	.+52     	; 0x662 <check_for_aks_block+0xb2>
     62e:	80 81       	ld	r24, Z
     630:	85 58       	subi	r24, 0x85	; 133
     632:	82 30       	cpi	r24, 0x02	; 2
     634:	e8 f0       	brcs	.+58     	; 0x670 <check_for_aks_block+0xc0>
     636:	c4 80       	ldd	r12, Z+4	; 0x04
     638:	d5 80       	ldd	r13, Z+5	; 0x05
     63a:	82 81       	ldd	r24, Z+2	; 0x02
     63c:	93 81       	ldd	r25, Z+3	; 0x03
     63e:	ec 01       	movw	r28, r24
     640:	89 81       	ldd	r24, Y+1	; 0x01
     642:	9a 81       	ldd	r25, Y+2	; 0x02
     644:	c8 16       	cp	r12, r24
     646:	d9 06       	cpc	r13, r25
     648:	60 f4       	brcc	.+24     	; 0x662 <check_for_aks_block+0xb2>
     64a:	8c 19       	sub	r24, r12
     64c:	9d 09       	sbc	r25, r13
     64e:	cc 91       	ld	r28, X
     650:	d0 e0       	ldi	r29, 0x00	; 0
     652:	c8 17       	cp	r28, r24
     654:	d9 07       	cpc	r29, r25
     656:	28 f4       	brcc	.+10     	; 0x662 <check_for_aks_block+0xb2>
     658:	8c 1b       	sub	r24, r28
     65a:	9d 0b       	sbc	r25, r29
     65c:	28 17       	cp	r18, r24
     65e:	39 07       	cpc	r19, r25
     660:	38 f0       	brcs	.+14     	; 0x670 <check_for_aks_block+0xc0>
     662:	4f 5f       	subi	r20, 0xFF	; 255
     664:	5f 4f       	sbci	r21, 0xFF	; 255
     666:	13 96       	adiw	r26, 0x03	; 3
     668:	36 96       	adiw	r30, 0x06	; 6
     66a:	d6 cf       	rjmp	.-84     	; 0x618 <check_for_aks_block+0x68>
     66c:	80 e0       	ldi	r24, 0x00	; 0
     66e:	01 c0       	rjmp	.+2      	; 0x672 <check_for_aks_block+0xc2>
     670:	81 e0       	ldi	r24, 0x01	; 1
     672:	df 91       	pop	r29
     674:	cf 91       	pop	r28
     676:	1f 91       	pop	r17
     678:	0f 91       	pop	r16
     67a:	ff 90       	pop	r15
     67c:	df 90       	pop	r13
     67e:	cf 90       	pop	r12
     680:	08 95       	ret

00000682 <qtm_update_qtlib_timer>:
     682:	20 91 52 3e 	lds	r18, 0x3E52	; 0x803e52 <qtm_local_ms_timecount>
     686:	30 91 53 3e 	lds	r19, 0x3E53	; 0x803e53 <qtm_local_ms_timecount+0x1>
     68a:	82 0f       	add	r24, r18
     68c:	93 1f       	adc	r25, r19
     68e:	80 93 52 3e 	sts	0x3E52, r24	; 0x803e52 <qtm_local_ms_timecount>
     692:	90 93 53 3e 	sts	0x3E53, r25	; 0x803e53 <qtm_local_ms_timecount+0x1>
     696:	08 95       	ret

00000698 <qtm_init_sensor_key>:
     698:	00 97       	sbiw	r24, 0x00	; 0
     69a:	d9 f0       	breq	.+54     	; 0x6d2 <qtm_init_sensor_key+0x3a>
     69c:	41 15       	cp	r20, r1
     69e:	51 05       	cpc	r21, r1
     6a0:	c1 f0       	breq	.+48     	; 0x6d2 <qtm_init_sensor_key+0x3a>
     6a2:	26 e0       	ldi	r18, 0x06	; 6
     6a4:	62 9f       	mul	r22, r18
     6a6:	b0 01       	movw	r22, r0
     6a8:	11 24       	eor	r1, r1
     6aa:	dc 01       	movw	r26, r24
     6ac:	14 96       	adiw	r26, 0x04	; 4
     6ae:	ed 91       	ld	r30, X+
     6b0:	fc 91       	ld	r31, X
     6b2:	15 97       	sbiw	r26, 0x05	; 5
     6b4:	e6 0f       	add	r30, r22
     6b6:	f7 1f       	adc	r31, r23
     6b8:	21 e0       	ldi	r18, 0x01	; 1
     6ba:	20 83       	st	Z, r18
     6bc:	14 96       	adiw	r26, 0x04	; 4
     6be:	8d 91       	ld	r24, X+
     6c0:	9c 91       	ld	r25, X
     6c2:	15 97       	sbiw	r26, 0x05	; 5
     6c4:	fc 01       	movw	r30, r24
     6c6:	e6 0f       	add	r30, r22
     6c8:	f7 1f       	adc	r31, r23
     6ca:	42 83       	std	Z+2, r20	; 0x02
     6cc:	53 83       	std	Z+3, r21	; 0x03
     6ce:	80 e0       	ldi	r24, 0x00	; 0
     6d0:	08 95       	ret
     6d2:	8b e0       	ldi	r24, 0x0B	; 11
     6d4:	08 95       	ret

000006d6 <qtm_key_sensors_process>:
     6d6:	2f 92       	push	r2
     6d8:	3f 92       	push	r3
     6da:	4f 92       	push	r4
     6dc:	5f 92       	push	r5
     6de:	6f 92       	push	r6
     6e0:	7f 92       	push	r7
     6e2:	8f 92       	push	r8
     6e4:	9f 92       	push	r9
     6e6:	af 92       	push	r10
     6e8:	bf 92       	push	r11
     6ea:	cf 92       	push	r12
     6ec:	df 92       	push	r13
     6ee:	ef 92       	push	r14
     6f0:	ff 92       	push	r15
     6f2:	0f 93       	push	r16
     6f4:	1f 93       	push	r17
     6f6:	cf 93       	push	r28
     6f8:	df 93       	push	r29
     6fa:	00 97       	sbiw	r24, 0x00	; 0
     6fc:	09 f4       	brne	.+2      	; 0x700 <qtm_key_sensors_process+0x2a>
     6fe:	7c c3       	rjmp	.+1784   	; 0xdf8 <qtm_key_sensors_process+0x722>
     700:	ec 01       	movw	r28, r24
     702:	a1 2c       	mov	r10, r1
     704:	b1 2c       	mov	r11, r1
     706:	81 2c       	mov	r8, r1
     708:	91 2c       	mov	r9, r1
     70a:	21 2c       	mov	r2, r1
     70c:	d1 2c       	mov	r13, r1
     70e:	55 24       	eor	r5, r5
     710:	53 94       	inc	r5
     712:	33 e0       	ldi	r19, 0x03	; 3
     714:	c3 2e       	mov	r12, r19
     716:	45 e8       	ldi	r20, 0x85	; 133
     718:	64 2e       	mov	r6, r20
     71a:	56 e8       	ldi	r21, 0x86	; 134
     71c:	75 2e       	mov	r7, r21
     71e:	62 e0       	ldi	r22, 0x02	; 2
     720:	36 2e       	mov	r3, r22
     722:	78 e0       	ldi	r23, 0x08	; 8
     724:	47 2e       	mov	r4, r23
     726:	ea 81       	ldd	r30, Y+2	; 0x02
     728:	fb 81       	ldd	r31, Y+3	; 0x03
     72a:	80 81       	ld	r24, Z
     72c:	91 81       	ldd	r25, Z+1	; 0x01
     72e:	88 16       	cp	r8, r24
     730:	99 06       	cpc	r9, r25
     732:	08 f0       	brcs	.+2      	; 0x736 <qtm_key_sensors_process+0x60>
     734:	a4 c1       	rjmp	.+840    	; 0xa7e <qtm_key_sensors_process+0x3a8>
     736:	75 01       	movw	r14, r10
     738:	ee 0c       	add	r14, r14
     73a:	ff 1c       	adc	r15, r15
     73c:	ec 81       	ldd	r30, Y+4	; 0x04
     73e:	fd 81       	ldd	r31, Y+5	; 0x05
     740:	ee 0d       	add	r30, r14
     742:	ff 1d       	adc	r31, r15
     744:	a2 81       	ldd	r26, Z+2	; 0x02
     746:	b3 81       	ldd	r27, Z+3	; 0x03
     748:	9c 91       	ld	r25, X
     74a:	9e 71       	andi	r25, 0x1E	; 30
     74c:	09 f0       	breq	.+2      	; 0x750 <qtm_key_sensors_process+0x7a>
     74e:	50 82       	st	Z, r5
     750:	0c 81       	ldd	r16, Y+4	; 0x04
     752:	1d 81       	ldd	r17, Y+5	; 0x05
     754:	0e 0d       	add	r16, r14
     756:	1f 1d       	adc	r17, r15
     758:	d8 01       	movw	r26, r16
     75a:	8c 91       	ld	r24, X
     75c:	84 30       	cpi	r24, 0x04	; 4
     75e:	09 f4       	brne	.+2      	; 0x762 <qtm_key_sensors_process+0x8c>
     760:	9d c0       	rjmp	.+314    	; 0x89c <qtm_key_sensors_process+0x1c6>
     762:	38 f4       	brcc	.+14     	; 0x772 <qtm_key_sensors_process+0x9c>
     764:	82 30       	cpi	r24, 0x02	; 2
     766:	d1 f0       	breq	.+52     	; 0x79c <qtm_key_sensors_process+0xc6>
     768:	08 f0       	brcs	.+2      	; 0x76c <qtm_key_sensors_process+0x96>
     76a:	45 c0       	rjmp	.+138    	; 0x7f6 <qtm_key_sensors_process+0x120>
     76c:	81 30       	cpi	r24, 0x01	; 1
     76e:	59 f0       	breq	.+22     	; 0x786 <qtm_key_sensors_process+0xb0>
     770:	7f c1       	rjmp	.+766    	; 0xa70 <qtm_key_sensors_process+0x39a>
     772:	85 38       	cpi	r24, 0x85	; 133
     774:	09 f4       	brne	.+2      	; 0x778 <qtm_key_sensors_process+0xa2>
     776:	bd c0       	rjmp	.+378    	; 0x8f2 <qtm_key_sensors_process+0x21c>
     778:	86 38       	cpi	r24, 0x86	; 134
     77a:	09 f4       	brne	.+2      	; 0x77e <qtm_key_sensors_process+0xa8>
     77c:	f3 c0       	rjmp	.+486    	; 0x964 <qtm_key_sensors_process+0x28e>
     77e:	87 30       	cpi	r24, 0x07	; 7
     780:	09 f0       	breq	.+2      	; 0x784 <qtm_key_sensors_process+0xae>
     782:	76 c1       	rjmp	.+748    	; 0xa70 <qtm_key_sensors_process+0x39a>
     784:	34 c1       	rjmp	.+616    	; 0x9ee <qtm_key_sensors_process+0x318>
     786:	91 11       	cpse	r25, r1
     788:	65 c1       	rjmp	.+714    	; 0xa54 <qtm_key_sensors_process+0x37e>
     78a:	f8 01       	movw	r30, r16
     78c:	30 82       	st	Z, r3
     78e:	8c 81       	ldd	r24, Y+4	; 0x04
     790:	9d 81       	ldd	r25, Y+5	; 0x05
     792:	fc 01       	movw	r30, r24
     794:	ee 0d       	add	r30, r14
     796:	ff 1d       	adc	r31, r15
     798:	41 82       	std	Z+1, r4	; 0x01
     79a:	5c c1       	rjmp	.+696    	; 0xa54 <qtm_key_sensors_process+0x37e>
     79c:	d8 01       	movw	r26, r16
     79e:	11 96       	adiw	r26, 0x01	; 1
     7a0:	2c 91       	ld	r18, X
     7a2:	11 97       	sbiw	r26, 0x01	; 1
     7a4:	22 23       	and	r18, r18
     7a6:	29 f1       	breq	.+74     	; 0x7f2 <qtm_key_sensors_process+0x11c>
     7a8:	12 96       	adiw	r26, 0x02	; 2
     7aa:	ed 91       	ld	r30, X+
     7ac:	fc 91       	ld	r31, X
     7ae:	13 97       	sbiw	r26, 0x03	; 3
     7b0:	25 30       	cpi	r18, 0x05	; 5
     7b2:	18 f0       	brcs	.+6      	; 0x7ba <qtm_key_sensors_process+0xe4>
     7b4:	81 81       	ldd	r24, Z+1	; 0x01
     7b6:	92 81       	ldd	r25, Z+2	; 0x02
     7b8:	0e c0       	rjmp	.+28     	; 0x7d6 <qtm_key_sensors_process+0x100>
     7ba:	d8 01       	movw	r26, r16
     7bc:	14 96       	adiw	r26, 0x04	; 4
     7be:	8d 91       	ld	r24, X+
     7c0:	9c 91       	ld	r25, X
     7c2:	15 97       	sbiw	r26, 0x05	; 5
     7c4:	41 81       	ldd	r20, Z+1	; 0x01
     7c6:	52 81       	ldd	r21, Z+2	; 0x02
     7c8:	84 17       	cp	r24, r20
     7ca:	95 07       	cpc	r25, r21
     7cc:	69 f0       	breq	.+26     	; 0x7e8 <qtm_key_sensors_process+0x112>
     7ce:	48 17       	cp	r20, r24
     7d0:	59 07       	cpc	r21, r25
     7d2:	30 f4       	brcc	.+12     	; 0x7e0 <qtm_key_sensors_process+0x10a>
     7d4:	01 97       	sbiw	r24, 0x01	; 1
     7d6:	14 96       	adiw	r26, 0x04	; 4
     7d8:	8d 93       	st	X+, r24
     7da:	9c 93       	st	X, r25
     7dc:	15 97       	sbiw	r26, 0x05	; 5
     7de:	04 c0       	rjmp	.+8      	; 0x7e8 <qtm_key_sensors_process+0x112>
     7e0:	01 96       	adiw	r24, 0x01	; 1
     7e2:	f8 01       	movw	r30, r16
     7e4:	84 83       	std	Z+4, r24	; 0x04
     7e6:	95 83       	std	Z+5, r25	; 0x05
     7e8:	21 50       	subi	r18, 0x01	; 1
     7ea:	d8 01       	movw	r26, r16
     7ec:	11 96       	adiw	r26, 0x01	; 1
     7ee:	2c 93       	st	X, r18
     7f0:	31 c1       	rjmp	.+610    	; 0xa54 <qtm_key_sensors_process+0x37e>
     7f2:	f8 01       	movw	r30, r16
     7f4:	2b c1       	rjmp	.+598    	; 0xa4c <qtm_key_sensors_process+0x376>
     7f6:	d8 01       	movw	r26, r16
     7f8:	14 96       	adiw	r26, 0x04	; 4
     7fa:	2d 91       	ld	r18, X+
     7fc:	3c 91       	ld	r19, X
     7fe:	15 97       	sbiw	r26, 0x05	; 5
     800:	12 96       	adiw	r26, 0x02	; 2
     802:	ed 91       	ld	r30, X+
     804:	fc 91       	ld	r31, X
     806:	13 97       	sbiw	r26, 0x03	; 3
     808:	41 81       	ldd	r20, Z+1	; 0x01
     80a:	52 81       	ldd	r21, Z+2	; 0x02
     80c:	24 17       	cp	r18, r20
     80e:	35 07       	cpc	r19, r21
     810:	09 f4       	brne	.+2      	; 0x814 <qtm_key_sensors_process+0x13e>
     812:	2e c1       	rjmp	.+604    	; 0xa70 <qtm_key_sensors_process+0x39a>
     814:	8e 81       	ldd	r24, Y+6	; 0x06
     816:	9f 81       	ldd	r25, Y+7	; 0x07
     818:	42 17       	cp	r20, r18
     81a:	53 07       	cpc	r21, r19
     81c:	f8 f4       	brcc	.+62     	; 0x85c <qtm_key_sensors_process+0x186>
     81e:	ea 81       	ldd	r30, Y+2	; 0x02
     820:	fb 81       	ldd	r31, Y+3	; 0x03
     822:	24 1b       	sub	r18, r20
     824:	35 0b       	sbc	r19, r21
     826:	dc 01       	movw	r26, r24
     828:	aa 0d       	add	r26, r10
     82a:	bb 1d       	adc	r27, r11
     82c:	8c 91       	ld	r24, X
     82e:	90 e0       	ldi	r25, 0x00	; 0
     830:	05 80       	ldd	r0, Z+5	; 0x05
     832:	02 c0       	rjmp	.+4      	; 0x838 <qtm_key_sensors_process+0x162>
     834:	95 95       	asr	r25
     836:	87 95       	ror	r24
     838:	0a 94       	dec	r0
     83a:	e2 f7       	brpl	.-8      	; 0x834 <qtm_key_sensors_process+0x15e>
     83c:	99 27       	eor	r25, r25
     83e:	28 17       	cp	r18, r24
     840:	39 07       	cpc	r19, r25
     842:	08 f4       	brcc	.+2      	; 0x846 <qtm_key_sensors_process+0x170>
     844:	15 c1       	rjmp	.+554    	; 0xa70 <qtm_key_sensors_process+0x39a>
     846:	84 81       	ldd	r24, Z+4	; 0x04
     848:	88 23       	and	r24, r24
     84a:	09 f4       	brne	.+2      	; 0x84e <qtm_key_sensors_process+0x178>
     84c:	11 c1       	rjmp	.+546    	; 0xa70 <qtm_key_sensors_process+0x39a>
     84e:	87 e0       	ldi	r24, 0x07	; 7
     850:	f8 01       	movw	r30, r16
     852:	80 83       	st	Z, r24
     854:	ea 81       	ldd	r30, Y+2	; 0x02
     856:	fb 81       	ldd	r31, Y+3	; 0x03
     858:	24 81       	ldd	r18, Z+4	; 0x04
     85a:	19 c0       	rjmp	.+50     	; 0x88e <qtm_key_sensors_process+0x1b8>
     85c:	fc 01       	movw	r30, r24
     85e:	ea 0d       	add	r30, r10
     860:	fb 1d       	adc	r31, r11
     862:	42 1b       	sub	r20, r18
     864:	53 0b       	sbc	r21, r19
     866:	80 81       	ld	r24, Z
     868:	90 e0       	ldi	r25, 0x00	; 0
     86a:	48 17       	cp	r20, r24
     86c:	59 07       	cpc	r21, r25
     86e:	08 f4       	brcc	.+2      	; 0x872 <qtm_key_sensors_process+0x19c>
     870:	ff c0       	rjmp	.+510    	; 0xa70 <qtm_key_sensors_process+0x39a>
     872:	82 81       	ldd	r24, Z+2	; 0x02
     874:	88 23       	and	r24, r24
     876:	29 f0       	breq	.+10     	; 0x882 <qtm_key_sensors_process+0x1ac>
     878:	b4 01       	movw	r22, r8
     87a:	ce 01       	movw	r24, r28
     87c:	99 de       	rcall	.-718    	; 0x5b0 <check_for_aks_block>
     87e:	81 11       	cpse	r24, r1
     880:	f7 c0       	rjmp	.+494    	; 0xa70 <qtm_key_sensors_process+0x39a>
     882:	e4 e0       	ldi	r30, 0x04	; 4
     884:	d8 01       	movw	r26, r16
     886:	ec 93       	st	X, r30
     888:	ea 81       	ldd	r30, Y+2	; 0x02
     88a:	fb 81       	ldd	r31, Y+3	; 0x03
     88c:	22 81       	ldd	r18, Z+2	; 0x02
     88e:	8c 81       	ldd	r24, Y+4	; 0x04
     890:	9d 81       	ldd	r25, Y+5	; 0x05
     892:	fc 01       	movw	r30, r24
     894:	ee 0d       	add	r30, r14
     896:	ff 1d       	adc	r31, r15
     898:	21 83       	std	Z+1, r18	; 0x01
     89a:	dc c0       	rjmp	.+440    	; 0xa54 <qtm_key_sensors_process+0x37e>
     89c:	d8 01       	movw	r26, r16
     89e:	14 96       	adiw	r26, 0x04	; 4
     8a0:	2d 91       	ld	r18, X+
     8a2:	3c 91       	ld	r19, X
     8a4:	15 97       	sbiw	r26, 0x05	; 5
     8a6:	12 96       	adiw	r26, 0x02	; 2
     8a8:	ed 91       	ld	r30, X+
     8aa:	fc 91       	ld	r31, X
     8ac:	13 97       	sbiw	r26, 0x03	; 3
     8ae:	81 81       	ldd	r24, Z+1	; 0x01
     8b0:	92 81       	ldd	r25, Z+2	; 0x02
     8b2:	82 17       	cp	r24, r18
     8b4:	93 07       	cpc	r25, r19
     8b6:	08 f4       	brcc	.+2      	; 0x8ba <qtm_key_sensors_process+0x1e4>
     8b8:	ba c0       	rjmp	.+372    	; 0xa2e <qtm_key_sensors_process+0x358>
     8ba:	ee 81       	ldd	r30, Y+6	; 0x06
     8bc:	ff 81       	ldd	r31, Y+7	; 0x07
     8be:	ea 0d       	add	r30, r10
     8c0:	fb 1d       	adc	r31, r11
     8c2:	82 1b       	sub	r24, r18
     8c4:	93 0b       	sbc	r25, r19
     8c6:	20 81       	ld	r18, Z
     8c8:	30 e0       	ldi	r19, 0x00	; 0
     8ca:	28 17       	cp	r18, r24
     8cc:	39 07       	cpc	r19, r25
     8ce:	08 f0       	brcs	.+2      	; 0x8d2 <qtm_key_sensors_process+0x1fc>
     8d0:	c4 c0       	rjmp	.+392    	; 0xa5a <qtm_key_sensors_process+0x384>
     8d2:	82 81       	ldd	r24, Z+2	; 0x02
     8d4:	88 23       	and	r24, r24
     8d6:	29 f0       	breq	.+10     	; 0x8e2 <qtm_key_sensors_process+0x20c>
     8d8:	b4 01       	movw	r22, r8
     8da:	ce 01       	movw	r24, r28
     8dc:	69 de       	rcall	.-814    	; 0x5b0 <check_for_aks_block>
     8de:	81 11       	cpse	r24, r1
     8e0:	c7 c0       	rjmp	.+398    	; 0xa70 <qtm_key_sensors_process+0x39a>
     8e2:	f8 01       	movw	r30, r16
     8e4:	81 81       	ldd	r24, Z+1	; 0x01
     8e6:	88 23       	and	r24, r24
     8e8:	09 f4       	brne	.+2      	; 0x8ec <qtm_key_sensors_process+0x216>
     8ea:	6a c0       	rjmp	.+212    	; 0x9c0 <qtm_key_sensors_process+0x2ea>
     8ec:	81 50       	subi	r24, 0x01	; 1
     8ee:	81 83       	std	Z+1, r24	; 0x01
     8f0:	b1 c0       	rjmp	.+354    	; 0xa54 <qtm_key_sensors_process+0x37e>
     8f2:	e8 81       	ld	r30, Y
     8f4:	f9 81       	ldd	r31, Y+1	; 0x01
     8f6:	aa 81       	ldd	r26, Y+2	; 0x02
     8f8:	bb 81       	ldd	r27, Y+3	; 0x03
     8fa:	18 96       	adiw	r26, 0x08	; 8
     8fc:	8c 91       	ld	r24, X
     8fe:	83 83       	std	Z+3, r24	; 0x03
     900:	ec 81       	ldd	r30, Y+4	; 0x04
     902:	fd 81       	ldd	r31, Y+5	; 0x05
     904:	ee 0d       	add	r30, r14
     906:	ff 1d       	adc	r31, r15
     908:	44 81       	ldd	r20, Z+4	; 0x04
     90a:	55 81       	ldd	r21, Z+5	; 0x05
     90c:	a2 81       	ldd	r26, Z+2	; 0x02
     90e:	b3 81       	ldd	r27, Z+3	; 0x03
     910:	11 96       	adiw	r26, 0x01	; 1
     912:	8d 91       	ld	r24, X+
     914:	9c 91       	ld	r25, X
     916:	12 97       	sbiw	r26, 0x02	; 2
     918:	84 17       	cp	r24, r20
     91a:	95 07       	cpc	r25, r21
     91c:	c0 f0       	brcs	.+48     	; 0x94e <qtm_key_sensors_process+0x278>
     91e:	ae 81       	ldd	r26, Y+6	; 0x06
     920:	bf 81       	ldd	r27, Y+7	; 0x07
     922:	aa 0d       	add	r26, r10
     924:	bb 1d       	adc	r27, r11
     926:	6c 91       	ld	r22, X
     928:	26 2f       	mov	r18, r22
     92a:	30 e0       	ldi	r19, 0x00	; 0
     92c:	11 96       	adiw	r26, 0x01	; 1
     92e:	7c 91       	ld	r23, X
     930:	7f 5f       	subi	r23, 0xFF	; 255
     932:	02 c0       	rjmp	.+4      	; 0x938 <qtm_key_sensors_process+0x262>
     934:	35 95       	asr	r19
     936:	27 95       	ror	r18
     938:	7a 95       	dec	r23
     93a:	e2 f7       	brpl	.-8      	; 0x934 <qtm_key_sensors_process+0x25e>
     93c:	84 1b       	sub	r24, r20
     93e:	95 0b       	sbc	r25, r21
     940:	62 1b       	sub	r22, r18
     942:	26 2f       	mov	r18, r22
     944:	30 e0       	ldi	r19, 0x00	; 0
     946:	28 17       	cp	r18, r24
     948:	39 07       	cpc	r19, r25
     94a:	08 f4       	brcc	.+2      	; 0x94e <qtm_key_sensors_process+0x278>
     94c:	8f c0       	rjmp	.+286    	; 0xa6c <qtm_key_sensors_process+0x396>
     94e:	70 82       	st	Z, r7
     950:	ea 81       	ldd	r30, Y+2	; 0x02
     952:	fb 81       	ldd	r31, Y+3	; 0x03
     954:	22 81       	ldd	r18, Z+2	; 0x02
     956:	8c 81       	ldd	r24, Y+4	; 0x04
     958:	9d 81       	ldd	r25, Y+5	; 0x05
     95a:	fc 01       	movw	r30, r24
     95c:	ee 0d       	add	r30, r14
     95e:	ff 1d       	adc	r31, r15
     960:	21 83       	std	Z+1, r18	; 0x01
     962:	42 c0       	rjmp	.+132    	; 0x9e8 <qtm_key_sensors_process+0x312>
     964:	d8 01       	movw	r26, r16
     966:	14 96       	adiw	r26, 0x04	; 4
     968:	6d 91       	ld	r22, X+
     96a:	7c 91       	ld	r23, X
     96c:	15 97       	sbiw	r26, 0x05	; 5
     96e:	12 96       	adiw	r26, 0x02	; 2
     970:	ed 91       	ld	r30, X+
     972:	fc 91       	ld	r31, X
     974:	13 97       	sbiw	r26, 0x03	; 3
     976:	21 81       	ldd	r18, Z+1	; 0x01
     978:	32 81       	ldd	r19, Z+2	; 0x02
     97a:	26 17       	cp	r18, r22
     97c:	37 07       	cpc	r19, r23
     97e:	58 f4       	brcc	.+22     	; 0x996 <qtm_key_sensors_process+0x2c0>
     980:	11 96       	adiw	r26, 0x01	; 1
     982:	8c 91       	ld	r24, X
     984:	11 97       	sbiw	r26, 0x01	; 1
     986:	81 11       	cpse	r24, r1
     988:	02 c0       	rjmp	.+4      	; 0x98e <qtm_key_sensors_process+0x2b8>
     98a:	cc 92       	st	X, r12
     98c:	6f c0       	rjmp	.+222    	; 0xa6c <qtm_key_sensors_process+0x396>
     98e:	81 50       	subi	r24, 0x01	; 1
     990:	f8 01       	movw	r30, r16
     992:	81 83       	std	Z+1, r24	; 0x01
     994:	6b c0       	rjmp	.+214    	; 0xa6c <qtm_key_sensors_process+0x396>
     996:	ee 81       	ldd	r30, Y+6	; 0x06
     998:	ff 81       	ldd	r31, Y+7	; 0x07
     99a:	ea 0d       	add	r30, r10
     99c:	fb 1d       	adc	r31, r11
     99e:	80 81       	ld	r24, Z
     9a0:	48 2f       	mov	r20, r24
     9a2:	50 e0       	ldi	r21, 0x00	; 0
     9a4:	91 81       	ldd	r25, Z+1	; 0x01
     9a6:	9f 5f       	subi	r25, 0xFF	; 255
     9a8:	02 c0       	rjmp	.+4      	; 0x9ae <qtm_key_sensors_process+0x2d8>
     9aa:	55 95       	asr	r21
     9ac:	47 95       	ror	r20
     9ae:	9a 95       	dec	r25
     9b0:	e2 f7       	brpl	.-8      	; 0x9aa <qtm_key_sensors_process+0x2d4>
     9b2:	26 1b       	sub	r18, r22
     9b4:	37 0b       	sbc	r19, r23
     9b6:	84 1b       	sub	r24, r20
     9b8:	90 e0       	ldi	r25, 0x00	; 0
     9ba:	82 17       	cp	r24, r18
     9bc:	93 07       	cpc	r25, r19
     9be:	60 f4       	brcc	.+24     	; 0x9d8 <qtm_key_sensors_process+0x302>
     9c0:	d8 01       	movw	r26, r16
     9c2:	6c 92       	st	X, r6
     9c4:	ea 81       	ldd	r30, Y+2	; 0x02
     9c6:	fb 81       	ldd	r31, Y+3	; 0x03
     9c8:	23 81       	ldd	r18, Z+3	; 0x03
     9ca:	8c 81       	ldd	r24, Y+4	; 0x04
     9cc:	9d 81       	ldd	r25, Y+5	; 0x05
     9ce:	fc 01       	movw	r30, r24
     9d0:	ee 0d       	add	r30, r14
     9d2:	ff 1d       	adc	r31, r15
     9d4:	21 83       	std	Z+1, r18	; 0x01
     9d6:	4a c0       	rjmp	.+148    	; 0xa6c <qtm_key_sensors_process+0x396>
     9d8:	f8 01       	movw	r30, r16
     9da:	81 81       	ldd	r24, Z+1	; 0x01
     9dc:	81 11       	cpse	r24, r1
     9de:	02 c0       	rjmp	.+4      	; 0x9e4 <qtm_key_sensors_process+0x30e>
     9e0:	c0 82       	st	Z, r12
     9e2:	44 c0       	rjmp	.+136    	; 0xa6c <qtm_key_sensors_process+0x396>
     9e4:	81 50       	subi	r24, 0x01	; 1
     9e6:	81 83       	std	Z+1, r24	; 0x01
     9e8:	22 24       	eor	r2, r2
     9ea:	23 94       	inc	r2
     9ec:	33 c0       	rjmp	.+102    	; 0xa54 <qtm_key_sensors_process+0x37e>
     9ee:	f8 01       	movw	r30, r16
     9f0:	24 81       	ldd	r18, Z+4	; 0x04
     9f2:	35 81       	ldd	r19, Z+5	; 0x05
     9f4:	02 80       	ldd	r0, Z+2	; 0x02
     9f6:	f3 81       	ldd	r31, Z+3	; 0x03
     9f8:	e0 2d       	mov	r30, r0
     9fa:	81 81       	ldd	r24, Z+1	; 0x01
     9fc:	92 81       	ldd	r25, Z+2	; 0x02
     9fe:	82 17       	cp	r24, r18
     a00:	93 07       	cpc	r25, r19
     a02:	58 f5       	brcc	.+86     	; 0xa5a <qtm_key_sensors_process+0x384>
     a04:	28 1b       	sub	r18, r24
     a06:	39 0b       	sbc	r19, r25
     a08:	ee 81       	ldd	r30, Y+6	; 0x06
     a0a:	ff 81       	ldd	r31, Y+7	; 0x07
     a0c:	ea 0d       	add	r30, r10
     a0e:	fb 1d       	adc	r31, r11
     a10:	80 81       	ld	r24, Z
     a12:	90 e0       	ldi	r25, 0x00	; 0
     a14:	ea 81       	ldd	r30, Y+2	; 0x02
     a16:	fb 81       	ldd	r31, Y+3	; 0x03
     a18:	05 80       	ldd	r0, Z+5	; 0x05
     a1a:	02 c0       	rjmp	.+4      	; 0xa20 <qtm_key_sensors_process+0x34a>
     a1c:	95 95       	asr	r25
     a1e:	87 95       	ror	r24
     a20:	0a 94       	dec	r0
     a22:	e2 f7       	brpl	.-8      	; 0xa1c <qtm_key_sensors_process+0x346>
     a24:	99 27       	eor	r25, r25
     a26:	28 17       	cp	r18, r24
     a28:	39 07       	cpc	r19, r25
     a2a:	18 f4       	brcc	.+6      	; 0xa32 <qtm_key_sensors_process+0x35c>
     a2c:	d8 01       	movw	r26, r16
     a2e:	cc 92       	st	X, r12
     a30:	16 c0       	rjmp	.+44     	; 0xa5e <qtm_key_sensors_process+0x388>
     a32:	f8 01       	movw	r30, r16
     a34:	81 81       	ldd	r24, Z+1	; 0x01
     a36:	81 11       	cpse	r24, r1
     a38:	0b c0       	rjmp	.+22     	; 0xa50 <qtm_key_sensors_process+0x37a>
     a3a:	50 82       	st	Z, r5
     a3c:	8c 81       	ldd	r24, Y+4	; 0x04
     a3e:	9d 81       	ldd	r25, Y+5	; 0x05
     a40:	fc 01       	movw	r30, r24
     a42:	ee 0d       	add	r30, r14
     a44:	ff 1d       	adc	r31, r15
     a46:	02 80       	ldd	r0, Z+2	; 0x02
     a48:	f3 81       	ldd	r31, Z+3	; 0x03
     a4a:	e0 2d       	mov	r30, r0
     a4c:	c0 82       	st	Z, r12
     a4e:	10 c0       	rjmp	.+32     	; 0xa70 <qtm_key_sensors_process+0x39a>
     a50:	81 50       	subi	r24, 0x01	; 1
     a52:	81 83       	std	Z+1, r24	; 0x01
     a54:	dd 24       	eor	r13, r13
     a56:	d3 94       	inc	r13
     a58:	0b c0       	rjmp	.+22     	; 0xa70 <qtm_key_sensors_process+0x39a>
     a5a:	f8 01       	movw	r30, r16
     a5c:	c0 82       	st	Z, r12
     a5e:	8c 81       	ldd	r24, Y+4	; 0x04
     a60:	9d 81       	ldd	r25, Y+5	; 0x05
     a62:	fc 01       	movw	r30, r24
     a64:	ee 0d       	add	r30, r14
     a66:	ff 1d       	adc	r31, r15
     a68:	11 82       	std	Z+1, r1	; 0x01
     a6a:	02 c0       	rjmp	.+4      	; 0xa70 <qtm_key_sensors_process+0x39a>
     a6c:	22 24       	eor	r2, r2
     a6e:	23 94       	inc	r2
     a70:	ff ef       	ldi	r31, 0xFF	; 255
     a72:	8f 1a       	sub	r8, r31
     a74:	9f 0a       	sbc	r9, r31
     a76:	83 e0       	ldi	r24, 0x03	; 3
     a78:	a8 0e       	add	r10, r24
     a7a:	b1 1c       	adc	r11, r1
     a7c:	54 ce       	rjmp	.-856    	; 0x726 <qtm_key_sensors_process+0x50>
     a7e:	e8 81       	ld	r30, Y
     a80:	f9 81       	ldd	r31, Y+1	; 0x01
     a82:	80 81       	ld	r24, Z
     a84:	87 ff       	sbrs	r24, 7
     a86:	23 c0       	rjmp	.+70     	; 0xace <qtm_key_sensors_process+0x3f8>
     a88:	40 e0       	ldi	r20, 0x00	; 0
     a8a:	50 e0       	ldi	r21, 0x00	; 0
     a8c:	20 e0       	ldi	r18, 0x00	; 0
     a8e:	30 e0       	ldi	r19, 0x00	; 0
     a90:	ea 81       	ldd	r30, Y+2	; 0x02
     a92:	fb 81       	ldd	r31, Y+3	; 0x03
     a94:	80 81       	ld	r24, Z
     a96:	91 81       	ldd	r25, Z+1	; 0x01
     a98:	28 17       	cp	r18, r24
     a9a:	39 07       	cpc	r19, r25
     a9c:	98 f4       	brcc	.+38     	; 0xac4 <qtm_key_sensors_process+0x3ee>
     a9e:	ec 81       	ldd	r30, Y+4	; 0x04
     aa0:	fd 81       	ldd	r31, Y+5	; 0x05
     aa2:	e4 0f       	add	r30, r20
     aa4:	f5 1f       	adc	r31, r21
     aa6:	a2 81       	ldd	r26, Z+2	; 0x02
     aa8:	b3 81       	ldd	r27, Z+3	; 0x03
     aaa:	8c 91       	ld	r24, X
     aac:	80 fd       	sbrc	r24, 0
     aae:	05 c0       	rjmp	.+10     	; 0xaba <qtm_key_sensors_process+0x3e4>
     ab0:	90 81       	ld	r25, Z
     ab2:	97 7f       	andi	r25, 0xF7	; 247
     ab4:	11 f0       	breq	.+4      	; 0xaba <qtm_key_sensors_process+0x3e4>
     ab6:	81 60       	ori	r24, 0x01	; 1
     ab8:	8c 93       	st	X, r24
     aba:	2f 5f       	subi	r18, 0xFF	; 255
     abc:	3f 4f       	sbci	r19, 0xFF	; 255
     abe:	4a 5f       	subi	r20, 0xFA	; 250
     ac0:	5f 4f       	sbci	r21, 0xFF	; 255
     ac2:	e6 cf       	rjmp	.-52     	; 0xa90 <qtm_key_sensors_process+0x3ba>
     ac4:	e8 81       	ld	r30, Y
     ac6:	f9 81       	ldd	r31, Y+1	; 0x01
     ac8:	80 81       	ld	r24, Z
     aca:	8f 77       	andi	r24, 0x7F	; 127
     acc:	80 83       	st	Z, r24
     ace:	d1 10       	cpse	r13, r1
     ad0:	07 c0       	rjmp	.+14     	; 0xae0 <qtm_key_sensors_process+0x40a>
     ad2:	e8 81       	ld	r30, Y
     ad4:	f9 81       	ldd	r31, Y+1	; 0x01
     ad6:	21 10       	cpse	r2, r1
     ad8:	6f c0       	rjmp	.+222    	; 0xbb8 <qtm_key_sensors_process+0x4e2>
     ada:	80 81       	ld	r24, Z
     adc:	8e 7f       	andi	r24, 0xFE	; 254
     ade:	6e c0       	rjmp	.+220    	; 0xbbc <qtm_key_sensors_process+0x4e6>
     ae0:	ea 81       	ldd	r30, Y+2	; 0x02
     ae2:	fb 81       	ldd	r31, Y+3	; 0x03
     ae4:	81 85       	ldd	r24, Z+9	; 0x09
     ae6:	88 23       	and	r24, r24
     ae8:	a1 f3       	breq	.-24     	; 0xad2 <qtm_key_sensors_process+0x3fc>
     aea:	e8 81       	ld	r30, Y
     aec:	f9 81       	ldd	r31, Y+1	; 0x01
     aee:	80 81       	ld	r24, Z
     af0:	80 68       	ori	r24, 0x80	; 128
     af2:	80 83       	st	Z, r24
     af4:	ea 81       	ldd	r30, Y+2	; 0x02
     af6:	fb 81       	ldd	r31, Y+3	; 0x03
     af8:	81 85       	ldd	r24, Z+9	; 0x09
     afa:	81 30       	cpi	r24, 0x01	; 1
     afc:	51 f7       	brne	.-44     	; 0xad2 <qtm_key_sensors_process+0x3fc>
     afe:	40 e0       	ldi	r20, 0x00	; 0
     b00:	50 e0       	ldi	r21, 0x00	; 0
     b02:	20 e0       	ldi	r18, 0x00	; 0
     b04:	30 e0       	ldi	r19, 0x00	; 0
     b06:	96 e0       	ldi	r25, 0x06	; 6
     b08:	d9 2e       	mov	r13, r25
     b0a:	ea 81       	ldd	r30, Y+2	; 0x02
     b0c:	fb 81       	ldd	r31, Y+3	; 0x03
     b0e:	60 81       	ld	r22, Z
     b10:	71 81       	ldd	r23, Z+1	; 0x01
     b12:	26 17       	cp	r18, r22
     b14:	37 07       	cpc	r19, r23
     b16:	e8 f6       	brcc	.-70     	; 0xad2 <qtm_key_sensors_process+0x3fc>
     b18:	0c 81       	ldd	r16, Y+4	; 0x04
     b1a:	1d 81       	ldd	r17, Y+5	; 0x05
     b1c:	fa 01       	movw	r30, r20
     b1e:	ee 0f       	add	r30, r30
     b20:	ff 1f       	adc	r31, r31
     b22:	e0 0f       	add	r30, r16
     b24:	f1 1f       	adc	r31, r17
     b26:	80 81       	ld	r24, Z
     b28:	98 2f       	mov	r25, r24
     b2a:	97 7f       	andi	r25, 0xF7	; 247
     b2c:	a1 f1       	breq	.+104    	; 0xb96 <qtm_key_sensors_process+0x4c0>
     b2e:	85 38       	cpi	r24, 0x85	; 133
     b30:	11 f0       	breq	.+4      	; 0xb36 <qtm_key_sensors_process+0x460>
     b32:	83 30       	cpi	r24, 0x03	; 3
     b34:	b1 f5       	brne	.+108    	; 0xba2 <qtm_key_sensors_process+0x4cc>
     b36:	ee 80       	ldd	r14, Y+6	; 0x06
     b38:	ff 80       	ldd	r15, Y+7	; 0x07
     b3a:	d7 01       	movw	r26, r14
     b3c:	a4 0f       	add	r26, r20
     b3e:	b5 1f       	adc	r27, r21
     b40:	12 96       	adiw	r26, 0x02	; 2
     b42:	bc 90       	ld	r11, X
     b44:	bb 20       	and	r11, r11
     b46:	39 f1       	breq	.+78     	; 0xb96 <qtm_key_sensors_process+0x4c0>
     b48:	80 e0       	ldi	r24, 0x00	; 0
     b4a:	90 e0       	ldi	r25, 0x00	; 0
     b4c:	c1 2c       	mov	r12, r1
     b4e:	86 17       	cp	r24, r22
     b50:	97 07       	cpc	r25, r23
     b52:	f8 f4       	brcc	.+62     	; 0xb92 <qtm_key_sensors_process+0x4bc>
     b54:	28 17       	cp	r18, r24
     b56:	39 07       	cpc	r19, r25
     b58:	d1 f0       	breq	.+52     	; 0xb8e <qtm_key_sensors_process+0x4b8>
     b5a:	d8 9e       	mul	r13, r24
     b5c:	d0 01       	movw	r26, r0
     b5e:	d9 9e       	mul	r13, r25
     b60:	b0 0d       	add	r27, r0
     b62:	11 24       	eor	r1, r1
     b64:	a0 0f       	add	r26, r16
     b66:	b1 1f       	adc	r27, r17
     b68:	ac 91       	ld	r26, X
     b6a:	a4 30       	cpi	r26, 0x04	; 4
     b6c:	11 f0       	breq	.+4      	; 0xb72 <qtm_key_sensors_process+0x49c>
     b6e:	a6 38       	cpi	r26, 0x86	; 134
     b70:	71 f4       	brne	.+28     	; 0xb8e <qtm_key_sensors_process+0x4b8>
     b72:	dc 01       	movw	r26, r24
     b74:	aa 0f       	add	r26, r26
     b76:	bb 1f       	adc	r27, r27
     b78:	a8 0f       	add	r26, r24
     b7a:	b9 1f       	adc	r27, r25
     b7c:	ae 0d       	add	r26, r14
     b7e:	bf 1d       	adc	r27, r15
     b80:	12 96       	adiw	r26, 0x02	; 2
     b82:	ac 91       	ld	r26, X
     b84:	ba 12       	cpse	r11, r26
     b86:	03 c0       	rjmp	.+6      	; 0xb8e <qtm_key_sensors_process+0x4b8>
     b88:	cb 01       	movw	r24, r22
     b8a:	cc 24       	eor	r12, r12
     b8c:	c3 94       	inc	r12
     b8e:	01 96       	adiw	r24, 0x01	; 1
     b90:	de cf       	rjmp	.-68     	; 0xb4e <qtm_key_sensors_process+0x478>
     b92:	c1 10       	cpse	r12, r1
     b94:	06 c0       	rjmp	.+12     	; 0xba2 <qtm_key_sensors_process+0x4cc>
     b96:	02 80       	ldd	r0, Z+2	; 0x02
     b98:	f3 81       	ldd	r31, Z+3	; 0x03
     b9a:	e0 2d       	mov	r30, r0
     b9c:	80 81       	ld	r24, Z
     b9e:	8e 7f       	andi	r24, 0xFE	; 254
     ba0:	05 c0       	rjmp	.+10     	; 0xbac <qtm_key_sensors_process+0x4d6>
     ba2:	02 80       	ldd	r0, Z+2	; 0x02
     ba4:	f3 81       	ldd	r31, Z+3	; 0x03
     ba6:	e0 2d       	mov	r30, r0
     ba8:	80 81       	ld	r24, Z
     baa:	81 60       	ori	r24, 0x01	; 1
     bac:	80 83       	st	Z, r24
     bae:	2f 5f       	subi	r18, 0xFF	; 255
     bb0:	3f 4f       	sbci	r19, 0xFF	; 255
     bb2:	4d 5f       	subi	r20, 0xFD	; 253
     bb4:	5f 4f       	sbci	r21, 0xFF	; 255
     bb6:	a9 cf       	rjmp	.-174    	; 0xb0a <qtm_key_sensors_process+0x434>
     bb8:	80 81       	ld	r24, Z
     bba:	81 60       	ori	r24, 0x01	; 1
     bbc:	80 83       	st	Z, r24
     bbe:	80 91 52 3e 	lds	r24, 0x3E52	; 0x803e52 <qtm_local_ms_timecount>
     bc2:	90 91 53 3e 	lds	r25, 0x3E53	; 0x803e53 <qtm_local_ms_timecount+0x1>
     bc6:	e8 81       	ld	r30, Y
     bc8:	f9 81       	ldd	r31, Y+1	; 0x01
     bca:	21 81       	ldd	r18, Z+1	; 0x01
     bcc:	32 81       	ldd	r19, Z+2	; 0x02
     bce:	a9 01       	movw	r20, r18
     bd0:	48 53       	subi	r20, 0x38	; 56
     bd2:	5f 4f       	sbci	r21, 0xFF	; 255
     bd4:	48 17       	cp	r20, r24
     bd6:	59 07       	cpc	r21, r25
     bd8:	38 f4       	brcc	.+14     	; 0xbe8 <qtm_key_sensors_process+0x512>
     bda:	82 1b       	sub	r24, r18
     bdc:	93 0b       	sbc	r25, r19
     bde:	aa 24       	eor	r10, r10
     be0:	a3 94       	inc	r10
     be2:	a3 e0       	ldi	r26, 0x03	; 3
     be4:	ba 2e       	mov	r11, r26
     be6:	44 c0       	rjmp	.+136    	; 0xc70 <qtm_key_sensors_process+0x59a>
     be8:	82 17       	cp	r24, r18
     bea:	93 07       	cpc	r25, r19
     bec:	10 f0       	brcs	.+4      	; 0xbf2 <qtm_key_sensors_process+0x51c>
     bee:	80 e0       	ldi	r24, 0x00	; 0
     bf0:	04 c1       	rjmp	.+520    	; 0xdfa <qtm_key_sensors_process+0x724>
     bf2:	82 1b       	sub	r24, r18
     bf4:	93 0b       	sbc	r25, r19
     bf6:	01 97       	sbiw	r24, 0x01	; 1
     bf8:	89 3c       	cpi	r24, 0xC9	; 201
     bfa:	91 05       	cpc	r25, r1
     bfc:	c0 f3       	brcs	.-16     	; 0xbee <qtm_key_sensors_process+0x518>
     bfe:	ef cf       	rjmp	.-34     	; 0xbde <qtm_key_sensors_process+0x508>
     c00:	88 5c       	subi	r24, 0xC8	; 200
     c02:	91 09       	sbc	r25, r1
     c04:	e8 81       	ld	r30, Y
     c06:	f9 81       	ldd	r31, Y+1	; 0x01
     c08:	21 81       	ldd	r18, Z+1	; 0x01
     c0a:	32 81       	ldd	r19, Z+2	; 0x02
     c0c:	28 53       	subi	r18, 0x38	; 56
     c0e:	3f 4f       	sbci	r19, 0xFF	; 255
     c10:	21 83       	std	Z+1, r18	; 0x01
     c12:	32 83       	std	Z+2, r19	; 0x02
     c14:	23 81       	ldd	r18, Z+3	; 0x03
     c16:	21 11       	cpse	r18, r1
     c18:	96 c0       	rjmp	.+300    	; 0xd46 <qtm_key_sensors_process+0x670>
     c1a:	24 81       	ldd	r18, Z+4	; 0x04
     c1c:	22 23       	and	r18, r18
     c1e:	11 f0       	breq	.+4      	; 0xc24 <qtm_key_sensors_process+0x54e>
     c20:	21 50       	subi	r18, 0x01	; 1
     c22:	24 83       	std	Z+4, r18	; 0x04
     c24:	e8 81       	ld	r30, Y
     c26:	f9 81       	ldd	r31, Y+1	; 0x01
     c28:	25 81       	ldd	r18, Z+5	; 0x05
     c2a:	22 23       	and	r18, r18
     c2c:	11 f0       	breq	.+4      	; 0xc32 <qtm_key_sensors_process+0x55c>
     c2e:	21 50       	subi	r18, 0x01	; 1
     c30:	25 83       	std	Z+5, r18	; 0x05
     c32:	8a 80       	ldd	r8, Y+2	; 0x02
     c34:	9b 80       	ldd	r9, Y+3	; 0x03
     c36:	d4 01       	movw	r26, r8
     c38:	16 96       	adiw	r26, 0x06	; 6
     c3a:	2c 91       	ld	r18, X
     c3c:	16 97       	sbiw	r26, 0x06	; 6
     c3e:	21 11       	cpse	r18, r1
     c40:	1b c0       	rjmp	.+54     	; 0xc78 <qtm_key_sensors_process+0x5a2>
     c42:	8a 80       	ldd	r8, Y+2	; 0x02
     c44:	9b 80       	ldd	r9, Y+3	; 0x03
     c46:	f4 01       	movw	r30, r8
     c48:	27 81       	ldd	r18, Z+7	; 0x07
     c4a:	21 11       	cpse	r18, r1
     c4c:	48 c0       	rjmp	.+144    	; 0xcde <qtm_key_sensors_process+0x608>
     c4e:	ea 81       	ldd	r30, Y+2	; 0x02
     c50:	fb 81       	ldd	r31, Y+3	; 0x03
     c52:	23 81       	ldd	r18, Z+3	; 0x03
     c54:	22 23       	and	r18, r18
     c56:	61 f0       	breq	.+24     	; 0xc70 <qtm_key_sensors_process+0x59a>
     c58:	20 e0       	ldi	r18, 0x00	; 0
     c5a:	30 e0       	ldi	r19, 0x00	; 0
     c5c:	a0 e0       	ldi	r26, 0x00	; 0
     c5e:	b0 e0       	ldi	r27, 0x00	; 0
     c60:	ea 81       	ldd	r30, Y+2	; 0x02
     c62:	fb 81       	ldd	r31, Y+3	; 0x03
     c64:	40 81       	ld	r20, Z
     c66:	51 81       	ldd	r21, Z+1	; 0x01
     c68:	a4 17       	cp	r26, r20
     c6a:	b5 07       	cpc	r27, r21
     c6c:	08 f4       	brcc	.+2      	; 0xc70 <qtm_key_sensors_process+0x59a>
     c6e:	6e c0       	rjmp	.+220    	; 0xd4c <qtm_key_sensors_process+0x676>
     c70:	89 3c       	cpi	r24, 0xC9	; 201
     c72:	91 05       	cpc	r25, r1
     c74:	28 f6       	brcc	.-118    	; 0xc00 <qtm_key_sensors_process+0x52a>
     c76:	bb cf       	rjmp	.-138    	; 0xbee <qtm_key_sensors_process+0x518>
     c78:	08 81       	ld	r16, Y
     c7a:	19 81       	ldd	r17, Y+1	; 0x01
     c7c:	f8 01       	movw	r30, r16
     c7e:	24 81       	ldd	r18, Z+4	; 0x04
     c80:	21 11       	cpse	r18, r1
     c82:	df cf       	rjmp	.-66     	; 0xc42 <qtm_key_sensors_process+0x56c>
     c84:	ed 90       	ld	r14, X+
     c86:	fc 90       	ld	r15, X
     c88:	60 e0       	ldi	r22, 0x00	; 0
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	40 e0       	ldi	r20, 0x00	; 0
     c8e:	50 e0       	ldi	r21, 0x00	; 0
     c90:	4e 15       	cp	r20, r14
     c92:	5f 05       	cpc	r21, r15
     c94:	f1 f0       	breq	.+60     	; 0xcd2 <qtm_key_sensors_process+0x5fc>
     c96:	ec 81       	ldd	r30, Y+4	; 0x04
     c98:	fd 81       	ldd	r31, Y+5	; 0x05
     c9a:	e6 0f       	add	r30, r22
     c9c:	f7 1f       	adc	r31, r23
     c9e:	20 81       	ld	r18, Z
     ca0:	23 30       	cpi	r18, 0x03	; 3
     ca2:	11 f0       	breq	.+4      	; 0xca8 <qtm_key_sensors_process+0x5d2>
     ca4:	28 30       	cpi	r18, 0x08	; 8
     ca6:	81 f4       	brne	.+32     	; 0xcc8 <qtm_key_sensors_process+0x5f2>
     ca8:	24 81       	ldd	r18, Z+4	; 0x04
     caa:	35 81       	ldd	r19, Z+5	; 0x05
     cac:	c2 80       	ldd	r12, Z+2	; 0x02
     cae:	d3 80       	ldd	r13, Z+3	; 0x03
     cb0:	d6 01       	movw	r26, r12
     cb2:	11 96       	adiw	r26, 0x01	; 1
     cb4:	cd 90       	ld	r12, X+
     cb6:	dc 90       	ld	r13, X
     cb8:	12 97       	sbiw	r26, 0x02	; 2
     cba:	2c 15       	cp	r18, r12
     cbc:	3d 05       	cpc	r19, r13
     cbe:	20 f4       	brcc	.+8      	; 0xcc8 <qtm_key_sensors_process+0x5f2>
     cc0:	2f 5f       	subi	r18, 0xFF	; 255
     cc2:	3f 4f       	sbci	r19, 0xFF	; 255
     cc4:	24 83       	std	Z+4, r18	; 0x04
     cc6:	35 83       	std	Z+5, r19	; 0x05
     cc8:	4f 5f       	subi	r20, 0xFF	; 255
     cca:	5f 4f       	sbci	r21, 0xFF	; 255
     ccc:	6a 5f       	subi	r22, 0xFA	; 250
     cce:	7f 4f       	sbci	r23, 0xFF	; 255
     cd0:	df cf       	rjmp	.-66     	; 0xc90 <qtm_key_sensors_process+0x5ba>
     cd2:	f4 01       	movw	r30, r8
     cd4:	26 81       	ldd	r18, Z+6	; 0x06
     cd6:	d8 01       	movw	r26, r16
     cd8:	14 96       	adiw	r26, 0x04	; 4
     cda:	2c 93       	st	X, r18
     cdc:	b2 cf       	rjmp	.-156    	; 0xc42 <qtm_key_sensors_process+0x56c>
     cde:	08 81       	ld	r16, Y
     ce0:	19 81       	ldd	r17, Y+1	; 0x01
     ce2:	d8 01       	movw	r26, r16
     ce4:	15 96       	adiw	r26, 0x05	; 5
     ce6:	2c 91       	ld	r18, X
     ce8:	21 11       	cpse	r18, r1
     cea:	b1 cf       	rjmp	.-158    	; 0xc4e <qtm_key_sensors_process+0x578>
     cec:	e0 80       	ld	r14, Z
     cee:	f1 80       	ldd	r15, Z+1	; 0x01
     cf0:	60 e0       	ldi	r22, 0x00	; 0
     cf2:	70 e0       	ldi	r23, 0x00	; 0
     cf4:	40 e0       	ldi	r20, 0x00	; 0
     cf6:	50 e0       	ldi	r21, 0x00	; 0
     cf8:	4e 15       	cp	r20, r14
     cfa:	5f 05       	cpc	r21, r15
     cfc:	f1 f0       	breq	.+60     	; 0xd3a <qtm_key_sensors_process+0x664>
     cfe:	ec 81       	ldd	r30, Y+4	; 0x04
     d00:	fd 81       	ldd	r31, Y+5	; 0x05
     d02:	e6 0f       	add	r30, r22
     d04:	f7 1f       	adc	r31, r23
     d06:	20 81       	ld	r18, Z
     d08:	23 30       	cpi	r18, 0x03	; 3
     d0a:	11 f0       	breq	.+4      	; 0xd10 <qtm_key_sensors_process+0x63a>
     d0c:	28 30       	cpi	r18, 0x08	; 8
     d0e:	81 f4       	brne	.+32     	; 0xd30 <qtm_key_sensors_process+0x65a>
     d10:	24 81       	ldd	r18, Z+4	; 0x04
     d12:	35 81       	ldd	r19, Z+5	; 0x05
     d14:	c2 80       	ldd	r12, Z+2	; 0x02
     d16:	d3 80       	ldd	r13, Z+3	; 0x03
     d18:	d6 01       	movw	r26, r12
     d1a:	11 96       	adiw	r26, 0x01	; 1
     d1c:	cd 90       	ld	r12, X+
     d1e:	dc 90       	ld	r13, X
     d20:	12 97       	sbiw	r26, 0x02	; 2
     d22:	c2 16       	cp	r12, r18
     d24:	d3 06       	cpc	r13, r19
     d26:	20 f4       	brcc	.+8      	; 0xd30 <qtm_key_sensors_process+0x65a>
     d28:	21 50       	subi	r18, 0x01	; 1
     d2a:	31 09       	sbc	r19, r1
     d2c:	24 83       	std	Z+4, r18	; 0x04
     d2e:	35 83       	std	Z+5, r19	; 0x05
     d30:	4f 5f       	subi	r20, 0xFF	; 255
     d32:	5f 4f       	sbci	r21, 0xFF	; 255
     d34:	6a 5f       	subi	r22, 0xFA	; 250
     d36:	7f 4f       	sbci	r23, 0xFF	; 255
     d38:	df cf       	rjmp	.-66     	; 0xcf8 <qtm_key_sensors_process+0x622>
     d3a:	f4 01       	movw	r30, r8
     d3c:	27 81       	ldd	r18, Z+7	; 0x07
     d3e:	d8 01       	movw	r26, r16
     d40:	15 96       	adiw	r26, 0x05	; 5
     d42:	2c 93       	st	X, r18
     d44:	84 cf       	rjmp	.-248    	; 0xc4e <qtm_key_sensors_process+0x578>
     d46:	21 50       	subi	r18, 0x01	; 1
     d48:	23 83       	std	Z+3, r18	; 0x03
     d4a:	81 cf       	rjmp	.-254    	; 0xc4e <qtm_key_sensors_process+0x578>
     d4c:	a9 01       	movw	r20, r18
     d4e:	44 0f       	add	r20, r20
     d50:	55 1f       	adc	r21, r21
     d52:	ec 81       	ldd	r30, Y+4	; 0x04
     d54:	fd 81       	ldd	r31, Y+5	; 0x05
     d56:	e4 0f       	add	r30, r20
     d58:	f5 1f       	adc	r31, r21
     d5a:	60 81       	ld	r22, Z
     d5c:	65 38       	cpi	r22, 0x85	; 133
     d5e:	09 f0       	breq	.+2      	; 0xd62 <qtm_key_sensors_process+0x68c>
     d60:	47 c0       	rjmp	.+142    	; 0xdf0 <qtm_key_sensors_process+0x71a>
     d62:	61 81       	ldd	r22, Z+1	; 0x01
     d64:	66 23       	and	r22, r22
     d66:	19 f0       	breq	.+6      	; 0xd6e <qtm_key_sensors_process+0x698>
     d68:	61 50       	subi	r22, 0x01	; 1
     d6a:	61 83       	std	Z+1, r22	; 0x01
     d6c:	41 c0       	rjmp	.+130    	; 0xdf0 <qtm_key_sensors_process+0x71a>
     d6e:	a0 82       	st	Z, r10
     d70:	6c 81       	ldd	r22, Y+4	; 0x04
     d72:	7d 81       	ldd	r23, Y+5	; 0x05
     d74:	fb 01       	movw	r30, r22
     d76:	e4 0f       	add	r30, r20
     d78:	f5 1f       	adc	r31, r21
     d7a:	02 80       	ldd	r0, Z+2	; 0x02
     d7c:	f3 81       	ldd	r31, Z+3	; 0x03
     d7e:	e0 2d       	mov	r30, r0
     d80:	b0 82       	st	Z, r11
     d82:	ee 81       	ldd	r30, Y+6	; 0x06
     d84:	ff 81       	ldd	r31, Y+7	; 0x07
     d86:	e2 0f       	add	r30, r18
     d88:	f3 1f       	adc	r31, r19
     d8a:	d2 80       	ldd	r13, Z+2	; 0x02
     d8c:	dd 20       	and	r13, r13
     d8e:	81 f1       	breq	.+96     	; 0xdf0 <qtm_key_sensors_process+0x71a>
     d90:	40 e0       	ldi	r20, 0x00	; 0
     d92:	50 e0       	ldi	r21, 0x00	; 0
     d94:	00 e0       	ldi	r16, 0x00	; 0
     d96:	10 e0       	ldi	r17, 0x00	; 0
     d98:	ea 81       	ldd	r30, Y+2	; 0x02
     d9a:	fb 81       	ldd	r31, Y+3	; 0x03
     d9c:	60 81       	ld	r22, Z
     d9e:	71 81       	ldd	r23, Z+1	; 0x01
     da0:	06 17       	cp	r16, r22
     da2:	17 07       	cpc	r17, r23
     da4:	28 f5       	brcc	.+74     	; 0xdf0 <qtm_key_sensors_process+0x71a>
     da6:	ee 81       	ldd	r30, Y+6	; 0x06
     da8:	ff 81       	ldd	r31, Y+7	; 0x07
     daa:	e4 0f       	add	r30, r20
     dac:	f5 1f       	adc	r31, r21
     dae:	62 81       	ldd	r22, Z+2	; 0x02
     db0:	d6 12       	cpse	r13, r22
     db2:	19 c0       	rjmp	.+50     	; 0xde6 <qtm_key_sensors_process+0x710>
     db4:	ba 01       	movw	r22, r20
     db6:	66 0f       	add	r22, r22
     db8:	77 1f       	adc	r23, r23
     dba:	ec 81       	ldd	r30, Y+4	; 0x04
     dbc:	fd 81       	ldd	r31, Y+5	; 0x05
     dbe:	4f 01       	movw	r8, r30
     dc0:	86 0e       	add	r8, r22
     dc2:	97 1e       	adc	r9, r23
     dc4:	f4 01       	movw	r30, r8
     dc6:	e2 80       	ldd	r14, Z+2	; 0x02
     dc8:	f3 80       	ldd	r15, Z+3	; 0x03
     dca:	f7 01       	movw	r30, r14
     dcc:	f0 80       	ld	r15, Z
     dce:	f0 fe       	sbrs	r15, 0
     dd0:	0a c0       	rjmp	.+20     	; 0xde6 <qtm_key_sensors_process+0x710>
     dd2:	f4 01       	movw	r30, r8
     dd4:	a0 82       	st	Z, r10
     dd6:	ec 81       	ldd	r30, Y+4	; 0x04
     dd8:	fd 81       	ldd	r31, Y+5	; 0x05
     dda:	e6 0f       	add	r30, r22
     ddc:	f7 1f       	adc	r31, r23
     dde:	02 80       	ldd	r0, Z+2	; 0x02
     de0:	f3 81       	ldd	r31, Z+3	; 0x03
     de2:	e0 2d       	mov	r30, r0
     de4:	b0 82       	st	Z, r11
     de6:	0f 5f       	subi	r16, 0xFF	; 255
     de8:	1f 4f       	sbci	r17, 0xFF	; 255
     dea:	4d 5f       	subi	r20, 0xFD	; 253
     dec:	5f 4f       	sbci	r21, 0xFF	; 255
     dee:	d4 cf       	rjmp	.-88     	; 0xd98 <qtm_key_sensors_process+0x6c2>
     df0:	11 96       	adiw	r26, 0x01	; 1
     df2:	2d 5f       	subi	r18, 0xFD	; 253
     df4:	3f 4f       	sbci	r19, 0xFF	; 255
     df6:	34 cf       	rjmp	.-408    	; 0xc60 <qtm_key_sensors_process+0x58a>
     df8:	8b e0       	ldi	r24, 0x0B	; 11
     dfa:	df 91       	pop	r29
     dfc:	cf 91       	pop	r28
     dfe:	1f 91       	pop	r17
     e00:	0f 91       	pop	r16
     e02:	ff 90       	pop	r15
     e04:	ef 90       	pop	r14
     e06:	df 90       	pop	r13
     e08:	cf 90       	pop	r12
     e0a:	bf 90       	pop	r11
     e0c:	af 90       	pop	r10
     e0e:	9f 90       	pop	r9
     e10:	8f 90       	pop	r8
     e12:	7f 90       	pop	r7
     e14:	6f 90       	pop	r6
     e16:	5f 90       	pop	r5
     e18:	4f 90       	pop	r4
     e1a:	3f 90       	pop	r3
     e1c:	2f 90       	pop	r2
     e1e:	08 95       	ret

00000e20 <select_next_channel_to_measure>:
     e20:	80 91 57 3e 	lds	r24, 0x3E57	; 0x803e57 <current_measure_channel>
     e24:	90 91 58 3e 	lds	r25, 0x3E58	; 0x803e58 <current_measure_channel+0x1>
     e28:	a0 91 87 3e 	lds	r26, 0x3E87	; 0x803e87 <qtm_acquisition_control_working_set_ptr>
     e2c:	b0 91 88 3e 	lds	r27, 0x3E88	; 0x803e88 <qtm_acquisition_control_working_set_ptr+0x1>
     e30:	ed 91       	ld	r30, X+
     e32:	fc 91       	ld	r31, X
     e34:	11 97       	sbiw	r26, 0x01	; 1
     e36:	40 81       	ld	r20, Z
     e38:	51 81       	ldd	r21, Z+1	; 0x01
     e3a:	25 e0       	ldi	r18, 0x05	; 5
     e3c:	28 9f       	mul	r18, r24
     e3e:	b0 01       	movw	r22, r0
     e40:	29 9f       	mul	r18, r25
     e42:	70 0d       	add	r23, r0
     e44:	11 24       	eor	r1, r1
     e46:	20 e0       	ldi	r18, 0x00	; 0
     e48:	30 e0       	ldi	r19, 0x00	; 0
     e4a:	84 17       	cp	r24, r20
     e4c:	95 07       	cpc	r25, r21
     e4e:	a8 f4       	brcc	.+42     	; 0xe7a <select_next_channel_to_measure+0x5a>
     e50:	14 96       	adiw	r26, 0x04	; 4
     e52:	ed 91       	ld	r30, X+
     e54:	fc 91       	ld	r31, X
     e56:	15 97       	sbiw	r26, 0x05	; 5
     e58:	e2 0f       	add	r30, r18
     e5a:	f3 1f       	adc	r31, r19
     e5c:	e6 0f       	add	r30, r22
     e5e:	f7 1f       	adc	r31, r23
     e60:	e0 81       	ld	r30, Z
     e62:	2b 5f       	subi	r18, 0xFB	; 251
     e64:	3f 4f       	sbci	r19, 0xFF	; 255
     e66:	e0 fd       	sbrc	r30, 0
     e68:	02 c0       	rjmp	.+4      	; 0xe6e <select_next_channel_to_measure+0x4e>
     e6a:	01 96       	adiw	r24, 0x01	; 1
     e6c:	ee cf       	rjmp	.-36     	; 0xe4a <select_next_channel_to_measure+0x2a>
     e6e:	80 93 57 3e 	sts	0x3E57, r24	; 0x803e57 <current_measure_channel>
     e72:	90 93 58 3e 	sts	0x3E58, r25	; 0x803e58 <current_measure_channel+0x1>
     e76:	80 e0       	ldi	r24, 0x00	; 0
     e78:	08 95       	ret
     e7a:	10 92 57 3e 	sts	0x3E57, r1	; 0x803e57 <current_measure_channel>
     e7e:	10 92 58 3e 	sts	0x3E58, r1	; 0x803e58 <current_measure_channel+0x1>
     e82:	81 e0       	ldi	r24, 0x01	; 1
     e84:	08 95       	ret

00000e86 <qtm_measure_node>:
     e86:	bc 01       	movw	r22, r24
     e88:	e0 91 87 3e 	lds	r30, 0x3E87	; 0x803e87 <qtm_acquisition_control_working_set_ptr>
     e8c:	f0 91 88 3e 	lds	r31, 0x3E88	; 0x803e88 <qtm_acquisition_control_working_set_ptr+0x1>
     e90:	86 e0       	ldi	r24, 0x06	; 6
     e92:	86 9f       	mul	r24, r22
     e94:	90 01       	movw	r18, r0
     e96:	87 9f       	mul	r24, r23
     e98:	30 0d       	add	r19, r0
     e9a:	11 24       	eor	r1, r1
     e9c:	a2 81       	ldd	r26, Z+2	; 0x02
     e9e:	b3 81       	ldd	r27, Z+3	; 0x03
     ea0:	a2 0f       	add	r26, r18
     ea2:	b3 1f       	adc	r27, r19
     ea4:	11 96       	adiw	r26, 0x01	; 1
     ea6:	8c 91       	ld	r24, X
     ea8:	80 93 2a 06 	sts	0x062A, r24	; 0x80062a <gain_setting_int_cap+0x7f713c>
     eac:	a2 81       	ldd	r26, Z+2	; 0x02
     eae:	b3 81       	ldd	r27, Z+3	; 0x03
     eb0:	a2 0f       	add	r26, r18
     eb2:	b3 1f       	adc	r27, r19
     eb4:	8c 91       	ld	r24, X
     eb6:	80 93 26 06 	sts	0x0626, r24	; 0x800626 <gain_setting_int_cap+0x7f7138>
     eba:	95 e0       	ldi	r25, 0x05	; 5
     ebc:	96 9f       	mul	r25, r22
     ebe:	a0 01       	movw	r20, r0
     ec0:	97 9f       	mul	r25, r23
     ec2:	50 0d       	add	r21, r0
     ec4:	11 24       	eor	r1, r1
     ec6:	a4 81       	ldd	r26, Z+4	; 0x04
     ec8:	b5 81       	ldd	r27, Z+5	; 0x05
     eca:	a4 0f       	add	r26, r20
     ecc:	b5 1f       	adc	r27, r21
     ece:	13 96       	adiw	r26, 0x03	; 3
     ed0:	8c 91       	ld	r24, X
     ed2:	80 93 1a 06 	sts	0x061A, r24	; 0x80061a <gain_setting_int_cap+0x7f712c>
     ed6:	a4 81       	ldd	r26, Z+4	; 0x04
     ed8:	b5 81       	ldd	r27, Z+5	; 0x05
     eda:	a4 0f       	add	r26, r20
     edc:	b5 1f       	adc	r27, r21
     ede:	14 96       	adiw	r26, 0x04	; 4
     ee0:	8c 91       	ld	r24, X
     ee2:	80 93 1b 06 	sts	0x061B, r24	; 0x80061b <gain_setting_int_cap+0x7f712d>
     ee6:	a4 81       	ldd	r26, Z+4	; 0x04
     ee8:	b5 81       	ldd	r27, Z+5	; 0x05
     eea:	a4 0f       	add	r26, r20
     eec:	b5 1f       	adc	r27, r21
     eee:	8c 91       	ld	r24, X
     ef0:	81 fd       	sbrc	r24, 1
     ef2:	9c 93       	st	X, r25
     ef4:	84 81       	ldd	r24, Z+4	; 0x04
     ef6:	95 81       	ldd	r25, Z+5	; 0x05
     ef8:	dc 01       	movw	r26, r24
     efa:	a4 0f       	add	r26, r20
     efc:	b5 1f       	adc	r27, r21
     efe:	8c 91       	ld	r24, X
     f00:	8c 71       	andi	r24, 0x1C	; 28
     f02:	69 f4       	brne	.+26     	; 0xf1e <qtm_measure_node+0x98>
     f04:	a2 81       	ldd	r26, Z+2	; 0x02
     f06:	b3 81       	ldd	r27, Z+3	; 0x03
     f08:	a2 0f       	add	r26, r18
     f0a:	b3 1f       	adc	r27, r19
     f0c:	14 96       	adiw	r26, 0x04	; 4
     f0e:	ac 91       	ld	r26, X
     f10:	a2 95       	swap	r26
     f12:	af 70       	andi	r26, 0x0F	; 15
     f14:	b0 e0       	ldi	r27, 0x00	; 0
     f16:	a2 51       	subi	r26, 0x12	; 18
     f18:	bb 46       	sbci	r27, 0x6B	; 107
     f1a:	8c 91       	ld	r24, X
     f1c:	01 c0       	rjmp	.+2      	; 0xf20 <qtm_measure_node+0x9a>
     f1e:	8f e3       	ldi	r24, 0x3F	; 63
     f20:	80 93 1c 06 	sts	0x061C, r24	; 0x80061c <gain_setting_int_cap+0x7f712e>
     f24:	a2 81       	ldd	r26, Z+2	; 0x02
     f26:	b3 81       	ldd	r27, Z+3	; 0x03
     f28:	a2 0f       	add	r26, r18
     f2a:	b3 1f       	adc	r27, r19
     f2c:	12 96       	adiw	r26, 0x02	; 2
     f2e:	8c 91       	ld	r24, X
     f30:	8b 31       	cpi	r24, 0x1B	; 27
     f32:	10 f4       	brcc	.+4      	; 0xf38 <qtm_measure_node+0xb2>
     f34:	8c 5f       	subi	r24, 0xFC	; 252
     f36:	01 c0       	rjmp	.+2      	; 0xf3a <qtm_measure_node+0xb4>
     f38:	8f e1       	ldi	r24, 0x1F	; 31
     f3a:	80 93 05 06 	sts	0x0605, r24	; 0x800605 <gain_setting_int_cap+0x7f7117>
     f3e:	a2 81       	ldd	r26, Z+2	; 0x02
     f40:	b3 81       	ldd	r27, Z+3	; 0x03
     f42:	a2 0f       	add	r26, r18
     f44:	b3 1f       	adc	r27, r19
     f46:	15 96       	adiw	r26, 0x05	; 5
     f48:	8c 91       	ld	r24, X
     f4a:	80 93 01 06 	sts	0x0601, r24	; 0x800601 <gain_setting_int_cap+0x7f7113>
     f4e:	a2 81       	ldd	r26, Z+2	; 0x02
     f50:	b3 81       	ldd	r27, Z+3	; 0x03
     f52:	a2 0f       	add	r26, r18
     f54:	b3 1f       	adc	r27, r19
     f56:	13 96       	adiw	r26, 0x03	; 3
     f58:	8c 91       	ld	r24, X
     f5a:	82 95       	swap	r24
     f5c:	8f 70       	andi	r24, 0x0F	; 15
     f5e:	80 93 19 06 	sts	0x0619, r24	; 0x800619 <gain_setting_int_cap+0x7f712b>
     f62:	82 81       	ldd	r24, Z+2	; 0x02
     f64:	93 81       	ldd	r25, Z+3	; 0x03
     f66:	fc 01       	movw	r30, r24
     f68:	e2 0f       	add	r30, r18
     f6a:	f3 1f       	adc	r31, r19
     f6c:	83 81       	ldd	r24, Z+3	; 0x03
     f6e:	8f 70       	andi	r24, 0x0F	; 15
     f70:	80 61       	ori	r24, 0x10	; 16
     f72:	80 93 02 06 	sts	0x0602, r24	; 0x800602 <gain_setting_int_cap+0x7f7114>
     f76:	80 91 18 06 	lds	r24, 0x0618	; 0x800618 <gain_setting_int_cap+0x7f712a>
     f7a:	83 60       	ori	r24, 0x03	; 3
     f7c:	80 93 18 06 	sts	0x0618, r24	; 0x800618 <gain_setting_int_cap+0x7f712a>
     f80:	81 e8       	ldi	r24, 0x81	; 129
     f82:	80 93 00 06 	sts	0x0600, r24	; 0x800600 <gain_setting_int_cap+0x7f7112>
     f86:	81 e0       	ldi	r24, 0x01	; 1
     f88:	80 93 08 06 	sts	0x0608, r24	; 0x800608 <gain_setting_int_cap+0x7f711a>
     f8c:	08 95       	ret

00000f8e <qtm_acquisition_process>:
     f8e:	3f 92       	push	r3
     f90:	4f 92       	push	r4
     f92:	5f 92       	push	r5
     f94:	6f 92       	push	r6
     f96:	7f 92       	push	r7
     f98:	8f 92       	push	r8
     f9a:	9f 92       	push	r9
     f9c:	af 92       	push	r10
     f9e:	bf 92       	push	r11
     fa0:	cf 92       	push	r12
     fa2:	df 92       	push	r13
     fa4:	ef 92       	push	r14
     fa6:	ff 92       	push	r15
     fa8:	0f 93       	push	r16
     faa:	1f 93       	push	r17
     fac:	cf 93       	push	r28
     fae:	df 93       	push	r29
     fb0:	80 91 56 3e 	lds	r24, 0x3E56	; 0x803e56 <touch_seq_lib_state>
     fb4:	88 23       	and	r24, r24
     fb6:	09 f4       	brne	.+2      	; 0xfba <qtm_acquisition_process+0x2c>
     fb8:	48 c1       	rjmp	.+656    	; 0x124a <qtm_acquisition_process+0x2bc>
     fba:	a0 91 87 3e 	lds	r26, 0x3E87	; 0x803e87 <qtm_acquisition_control_working_set_ptr>
     fbe:	b0 91 88 3e 	lds	r27, 0x3E88	; 0x803e88 <qtm_acquisition_control_working_set_ptr+0x1>
     fc2:	c0 90 89 3e 	lds	r12, 0x3E89	; 0x803e89 <qtm_raw_data_measurements_ptr>
     fc6:	d0 90 8a 3e 	lds	r13, 0x3E8A	; 0x803e8a <qtm_raw_data_measurements_ptr+0x1>
     fca:	00 e0       	ldi	r16, 0x00	; 0
     fcc:	10 e0       	ldi	r17, 0x00	; 0
     fce:	60 e0       	ldi	r22, 0x00	; 0
     fd0:	70 e0       	ldi	r23, 0x00	; 0
     fd2:	e1 2c       	mov	r14, r1
     fd4:	f1 2c       	mov	r15, r1
     fd6:	80 e0       	ldi	r24, 0x00	; 0
     fd8:	33 24       	eor	r3, r3
     fda:	33 94       	inc	r3
     fdc:	d1 e8       	ldi	r29, 0x81	; 129
     fde:	4d 2e       	mov	r4, r29
     fe0:	88 24       	eor	r8, r8
     fe2:	8a 94       	dec	r8
     fe4:	99 24       	eor	r9, r9
     fe6:	93 94       	inc	r9
     fe8:	6d 90       	ld	r6, X+
     fea:	7c 90       	ld	r7, X
     fec:	11 97       	sbiw	r26, 0x01	; 1
     fee:	f3 01       	movw	r30, r6
     ff0:	20 81       	ld	r18, Z
     ff2:	31 81       	ldd	r19, Z+1	; 0x01
     ff4:	e2 16       	cp	r14, r18
     ff6:	f3 06       	cpc	r15, r19
     ff8:	08 f0       	brcs	.+2      	; 0xffc <qtm_acquisition_process+0x6e>
     ffa:	23 c1       	rjmp	.+582    	; 0x1242 <qtm_acquisition_process+0x2b4>
     ffc:	e6 01       	movw	r28, r12
     ffe:	29 91       	ld	r18, Y+
    1000:	39 91       	ld	r19, Y+
    1002:	6e 01       	movw	r12, r28
    1004:	14 96       	adiw	r26, 0x04	; 4
    1006:	ed 91       	ld	r30, X+
    1008:	fc 91       	ld	r31, X
    100a:	15 97       	sbiw	r26, 0x05	; 5
    100c:	e6 0f       	add	r30, r22
    100e:	f7 1f       	adc	r31, r23
    1010:	40 81       	ld	r20, Z
    1012:	4c 71       	andi	r20, 0x1C	; 28
    1014:	50 e0       	ldi	r21, 0x00	; 0
    1016:	56 95       	lsr	r21
    1018:	47 95       	ror	r20
    101a:	56 95       	lsr	r21
    101c:	47 95       	ror	r20
    101e:	41 15       	cp	r20, r1
    1020:	51 05       	cpc	r21, r1
    1022:	21 f0       	breq	.+8      	; 0x102c <qtm_acquisition_process+0x9e>
    1024:	41 30       	cpi	r20, 0x01	; 1
    1026:	51 05       	cpc	r21, r1
    1028:	b9 f0       	breq	.+46     	; 0x1058 <qtm_acquisition_process+0xca>
    102a:	02 c1       	rjmp	.+516    	; 0x1230 <qtm_acquisition_process+0x2a2>
    102c:	12 96       	adiw	r26, 0x02	; 2
    102e:	cd 91       	ld	r28, X+
    1030:	dc 91       	ld	r29, X
    1032:	13 97       	sbiw	r26, 0x03	; 3
    1034:	c0 0f       	add	r28, r16
    1036:	d1 1f       	adc	r29, r17
    1038:	4c 81       	ldd	r20, Y+4	; 0x04
    103a:	4f 70       	andi	r20, 0x0F	; 15
    103c:	9d 81       	ldd	r25, Y+5	; 0x05
    103e:	49 17       	cp	r20, r25
    1040:	10 f4       	brcc	.+4      	; 0x1046 <qtm_acquisition_process+0xb8>
    1042:	94 1b       	sub	r25, r20
    1044:	01 c0       	rjmp	.+2      	; 0x1048 <qtm_acquisition_process+0xba>
    1046:	90 e0       	ldi	r25, 0x00	; 0
    1048:	02 c0       	rjmp	.+4      	; 0x104e <qtm_acquisition_process+0xc0>
    104a:	36 95       	lsr	r19
    104c:	27 95       	ror	r18
    104e:	9a 95       	dec	r25
    1050:	e2 f7       	brpl	.-8      	; 0x104a <qtm_acquisition_process+0xbc>
    1052:	21 83       	std	Z+1, r18	; 0x01
    1054:	32 83       	std	Z+2, r19	; 0x02
    1056:	ed c0       	rjmp	.+474    	; 0x1232 <qtm_acquisition_process+0x2a4>
    1058:	12 96       	adiw	r26, 0x02	; 2
    105a:	4d 91       	ld	r20, X+
    105c:	5c 91       	ld	r21, X
    105e:	13 97       	sbiw	r26, 0x03	; 3
    1060:	40 0f       	add	r20, r16
    1062:	51 1f       	adc	r21, r17
    1064:	ea 01       	movw	r28, r20
    1066:	0d 80       	ldd	r0, Y+5	; 0x05
    1068:	02 c0       	rjmp	.+4      	; 0x106e <qtm_acquisition_process+0xe0>
    106a:	36 95       	lsr	r19
    106c:	27 95       	ror	r18
    106e:	0a 94       	dec	r0
    1070:	e2 f7       	brpl	.-8      	; 0x106a <qtm_acquisition_process+0xdc>
    1072:	21 83       	std	Z+1, r18	; 0x01
    1074:	32 83       	std	Z+2, r19	; 0x02
    1076:	a3 80       	ldd	r10, Z+3	; 0x03
    1078:	b4 80       	ldd	r11, Z+4	; 0x04
    107a:	21 15       	cp	r18, r1
    107c:	d2 e0       	ldi	r29, 0x02	; 2
    107e:	3d 07       	cpc	r19, r29
    1080:	20 f0       	brcs	.+8      	; 0x108a <qtm_acquisition_process+0xfc>
    1082:	2f 5f       	subi	r18, 0xFF	; 255
    1084:	31 40       	sbci	r19, 0x01	; 1
    1086:	91 e0       	ldi	r25, 0x01	; 1
    1088:	05 c0       	rjmp	.+10     	; 0x1094 <qtm_acquisition_process+0x106>
    108a:	a4 01       	movw	r20, r8
    108c:	42 1b       	sub	r20, r18
    108e:	53 0b       	sbc	r21, r19
    1090:	9a 01       	movw	r18, r20
    1092:	90 e0       	ldi	r25, 0x00	; 0
    1094:	e3 01       	movw	r28, r6
    1096:	5a 80       	ldd	r5, Y+2	; 0x02
    1098:	d0 e4       	ldi	r29, 0x40	; 64
    109a:	5d 12       	cpse	r5, r29
    109c:	05 c0       	rjmp	.+10     	; 0x10a8 <qtm_acquisition_process+0x11a>
    109e:	36 95       	lsr	r19
    10a0:	27 95       	ror	r18
    10a2:	99 23       	and	r25, r25
    10a4:	19 f0       	breq	.+6      	; 0x10ac <qtm_acquisition_process+0x11e>
    10a6:	09 c0       	rjmp	.+18     	; 0x10ba <qtm_acquisition_process+0x12c>
    10a8:	99 23       	and	r25, r25
    10aa:	39 f0       	breq	.+14     	; 0x10ba <qtm_acquisition_process+0x12c>
    10ac:	4f ef       	ldi	r20, 0xFF	; 255
    10ae:	a4 16       	cp	r10, r20
    10b0:	b4 06       	cpc	r11, r20
    10b2:	31 f4       	brne	.+12     	; 0x10c0 <qtm_acquisition_process+0x132>
    10b4:	40 82       	st	Z, r4
    10b6:	8e e0       	ldi	r24, 0x0E	; 14
    10b8:	07 c0       	rjmp	.+14     	; 0x10c8 <qtm_acquisition_process+0x13a>
    10ba:	77 24       	eor	r7, r7
    10bc:	73 94       	inc	r7
    10be:	01 c0       	rjmp	.+2      	; 0x10c2 <qtm_acquisition_process+0x134>
    10c0:	71 2c       	mov	r7, r1
    10c2:	2a 30       	cpi	r18, 0x0A	; 10
    10c4:	31 05       	cpc	r19, r1
    10c6:	90 f4       	brcc	.+36     	; 0x10ec <qtm_acquisition_process+0x15e>
    10c8:	14 96       	adiw	r26, 0x04	; 4
    10ca:	ed 91       	ld	r30, X+
    10cc:	fc 91       	ld	r31, X
    10ce:	15 97       	sbiw	r26, 0x05	; 5
    10d0:	e6 0f       	add	r30, r22
    10d2:	f7 1f       	adc	r31, r23
    10d4:	90 81       	ld	r25, Z
    10d6:	97 ff       	sbrs	r25, 7
    10d8:	30 82       	st	Z, r3
    10da:	14 96       	adiw	r26, 0x04	; 4
    10dc:	ed 91       	ld	r30, X+
    10de:	fc 91       	ld	r31, X
    10e0:	15 97       	sbiw	r26, 0x05	; 5
    10e2:	e6 0f       	add	r30, r22
    10e4:	f7 1f       	adc	r31, r23
    10e6:	a3 82       	std	Z+3, r10	; 0x03
    10e8:	b4 82       	std	Z+4, r11	; 0x04
    10ea:	a3 c0       	rjmp	.+326    	; 0x1232 <qtm_acquisition_process+0x2a4>
    10ec:	e5 01       	movw	r28, r10
    10ee:	cd 2f       	mov	r28, r29
    10f0:	dd 27       	eor	r29, r29
    10f2:	c2 95       	swap	r28
    10f4:	cf 70       	andi	r28, 0x0F	; 15
    10f6:	9c 2f       	mov	r25, r28
    10f8:	a5 01       	movw	r20, r10
    10fa:	44 27       	eor	r20, r20
    10fc:	5f 70       	andi	r21, 0x0F	; 15
    10fe:	65 2e       	mov	r6, r21
    1100:	a5 01       	movw	r20, r10
    1102:	40 7f       	andi	r20, 0xF0	; 240
    1104:	55 27       	eor	r21, r21
    1106:	52 95       	swap	r21
    1108:	42 95       	swap	r20
    110a:	4f 70       	andi	r20, 0x0F	; 15
    110c:	45 27       	eor	r20, r21
    110e:	5f 70       	andi	r21, 0x0F	; 15
    1110:	45 27       	eor	r20, r21
    1112:	5a 2d       	mov	r21, r10
    1114:	5f 70       	andi	r21, 0x0F	; 15
    1116:	a5 2e       	mov	r10, r21
    1118:	c4 30       	cpi	r28, 0x04	; 4
    111a:	30 f0       	brcs	.+12     	; 0x1128 <qtm_acquisition_process+0x19a>
    111c:	93 70       	andi	r25, 0x03	; 3
    111e:	d6 95       	lsr	r29
    1120:	c7 95       	ror	r28
    1122:	d6 95       	lsr	r29
    1124:	c7 95       	ror	r28
    1126:	9c 0f       	add	r25, r28
    1128:	71 10       	cpse	r7, r1
    112a:	3c c0       	rjmp	.+120    	; 0x11a4 <qtm_acquisition_process+0x216>
    112c:	50 e8       	ldi	r21, 0x80	; 128
    112e:	55 0d       	add	r21, r5
    1130:	52 30       	cpi	r21, 0x02	; 2
    1132:	10 f4       	brcc	.+4      	; 0x1138 <qtm_acquisition_process+0x1aa>
    1134:	56 e0       	ldi	r21, 0x06	; 6
    1136:	07 c0       	rjmp	.+14     	; 0x1146 <qtm_acquisition_process+0x1b8>
    1138:	53 e0       	ldi	r21, 0x03	; 3
    113a:	05 c0       	rjmp	.+10     	; 0x1146 <qtm_acquisition_process+0x1b8>
    113c:	95 17       	cp	r25, r21
    113e:	68 f4       	brcc	.+26     	; 0x115a <qtm_acquisition_process+0x1cc>
    1140:	9f 5f       	subi	r25, 0xFF	; 255
    1142:	2f 5c       	subi	r18, 0xCF	; 207
    1144:	31 09       	sbc	r19, r1
    1146:	20 3d       	cpi	r18, 0xD0	; 208
    1148:	31 05       	cpc	r19, r1
    114a:	c0 f7       	brcc	.-16     	; 0x113c <qtm_acquisition_process+0x1ae>
    114c:	06 c0       	rjmp	.+12     	; 0x115a <qtm_acquisition_process+0x1cc>
    114e:	cf e0       	ldi	r28, 0x0F	; 15
    1150:	6c 16       	cp	r6, r28
    1152:	49 f0       	breq	.+18     	; 0x1166 <qtm_acquisition_process+0x1d8>
    1154:	63 94       	inc	r6
    1156:	25 51       	subi	r18, 0x15	; 21
    1158:	31 09       	sbc	r19, r1
    115a:	26 31       	cpi	r18, 0x16	; 22
    115c:	31 05       	cpc	r19, r1
    115e:	b8 f7       	brcc	.-18     	; 0x114e <qtm_acquisition_process+0x1c0>
    1160:	df e0       	ldi	r29, 0x0F	; 15
    1162:	6d 12       	cpse	r6, r29
    1164:	0e c0       	rjmp	.+28     	; 0x1182 <qtm_acquisition_process+0x1f4>
    1166:	95 17       	cp	r25, r21
    1168:	20 f4       	brcc	.+8      	; 0x1172 <qtm_acquisition_process+0x1e4>
    116a:	9f 5f       	subi	r25, 0xFF	; 255
    116c:	d5 e0       	ldi	r29, 0x05	; 5
    116e:	6d 2e       	mov	r6, r29
    1170:	08 c0       	rjmp	.+16     	; 0x1182 <qtm_acquisition_process+0x1f4>
    1172:	cf e0       	ldi	r28, 0x0F	; 15
    1174:	6c 2e       	mov	r6, r28
    1176:	05 c0       	rjmp	.+10     	; 0x1182 <qtm_acquisition_process+0x1f4>
    1178:	4f 30       	cpi	r20, 0x0F	; 15
    117a:	49 f0       	breq	.+18     	; 0x118e <qtm_acquisition_process+0x200>
    117c:	4f 5f       	subi	r20, 0xFF	; 255
    117e:	22 50       	subi	r18, 0x02	; 2
    1180:	31 09       	sbc	r19, r1
    1182:	23 30       	cpi	r18, 0x03	; 3
    1184:	31 05       	cpc	r19, r1
    1186:	c0 f7       	brcc	.-16     	; 0x1178 <qtm_acquisition_process+0x1ea>
    1188:	4f 30       	cpi	r20, 0x0F	; 15
    118a:	09 f0       	breq	.+2      	; 0x118e <qtm_acquisition_process+0x200>
    118c:	65 c0       	rjmp	.+202    	; 0x1258 <qtm_acquisition_process+0x2ca>
    118e:	4f e0       	ldi	r20, 0x0F	; 15
    1190:	64 16       	cp	r6, r20
    1192:	81 f1       	breq	.+96     	; 0x11f4 <qtm_acquisition_process+0x266>
    1194:	63 94       	inc	r6
    1196:	45 e0       	ldi	r20, 0x05	; 5
    1198:	5f c0       	rjmp	.+190    	; 0x1258 <qtm_acquisition_process+0x2ca>
    119a:	99 23       	and	r25, r25
    119c:	61 f0       	breq	.+24     	; 0x11b6 <qtm_acquisition_process+0x228>
    119e:	91 50       	subi	r25, 0x01	; 1
    11a0:	2f 5c       	subi	r18, 0xCF	; 207
    11a2:	31 09       	sbc	r19, r1
    11a4:	20 3d       	cpi	r18, 0xD0	; 208
    11a6:	31 05       	cpc	r19, r1
    11a8:	c0 f7       	brcc	.-16     	; 0x119a <qtm_acquisition_process+0x20c>
    11aa:	05 c0       	rjmp	.+10     	; 0x11b6 <qtm_acquisition_process+0x228>
    11ac:	66 20       	and	r6, r6
    11ae:	41 f0       	breq	.+16     	; 0x11c0 <qtm_acquisition_process+0x232>
    11b0:	6a 94       	dec	r6
    11b2:	25 51       	subi	r18, 0x15	; 21
    11b4:	31 09       	sbc	r19, r1
    11b6:	26 31       	cpi	r18, 0x16	; 22
    11b8:	31 05       	cpc	r19, r1
    11ba:	c0 f7       	brcc	.-16     	; 0x11ac <qtm_acquisition_process+0x21e>
    11bc:	61 10       	cpse	r6, r1
    11be:	0d c0       	rjmp	.+26     	; 0x11da <qtm_acquisition_process+0x24c>
    11c0:	99 23       	and	r25, r25
    11c2:	21 f0       	breq	.+8      	; 0x11cc <qtm_acquisition_process+0x23e>
    11c4:	91 50       	subi	r25, 0x01	; 1
    11c6:	5a e0       	ldi	r21, 0x0A	; 10
    11c8:	65 2e       	mov	r6, r21
    11ca:	07 c0       	rjmp	.+14     	; 0x11da <qtm_acquisition_process+0x24c>
    11cc:	61 2c       	mov	r6, r1
    11ce:	05 c0       	rjmp	.+10     	; 0x11da <qtm_acquisition_process+0x24c>
    11d0:	44 23       	and	r20, r20
    11d2:	41 f0       	breq	.+16     	; 0x11e4 <qtm_acquisition_process+0x256>
    11d4:	41 50       	subi	r20, 0x01	; 1
    11d6:	22 50       	subi	r18, 0x02	; 2
    11d8:	31 09       	sbc	r19, r1
    11da:	23 30       	cpi	r18, 0x03	; 3
    11dc:	31 05       	cpc	r19, r1
    11de:	c0 f7       	brcc	.-16     	; 0x11d0 <qtm_acquisition_process+0x242>
    11e0:	41 11       	cpse	r20, r1
    11e2:	10 c0       	rjmp	.+32     	; 0x1204 <qtm_acquisition_process+0x276>
    11e4:	66 20       	and	r6, r6
    11e6:	e9 f1       	breq	.+122    	; 0x1262 <qtm_acquisition_process+0x2d4>
    11e8:	6a 94       	dec	r6
    11ea:	4a e0       	ldi	r20, 0x0A	; 10
    11ec:	23 30       	cpi	r18, 0x03	; 3
    11ee:	31 05       	cpc	r19, r1
    11f0:	c8 f6       	brcc	.-78     	; 0x11a4 <qtm_acquisition_process+0x216>
    11f2:	08 c0       	rjmp	.+16     	; 0x1204 <qtm_acquisition_process+0x276>
    11f4:	59 13       	cpse	r21, r25
    11f6:	2f c0       	rjmp	.+94     	; 0x1256 <qtm_acquisition_process+0x2c8>
    11f8:	23 30       	cpi	r18, 0x03	; 3
    11fa:	31 05       	cpc	r19, r1
    11fc:	40 f1       	brcs	.+80     	; 0x124e <qtm_acquisition_process+0x2c0>
    11fe:	4f e0       	ldi	r20, 0x0F	; 15
    1200:	a4 2e       	mov	r10, r20
    1202:	4f e0       	ldi	r20, 0x0F	; 15
    1204:	94 30       	cpi	r25, 0x04	; 4
    1206:	18 f0       	brcs	.+6      	; 0x120e <qtm_acquisition_process+0x280>
    1208:	99 0f       	add	r25, r25
    120a:	99 0f       	add	r25, r25
    120c:	99 50       	subi	r25, 0x09	; 9
    120e:	c0 e1       	ldi	r28, 0x10	; 16
    1210:	4c 9f       	mul	r20, r28
    1212:	a0 01       	movw	r20, r0
    1214:	11 24       	eor	r1, r1
    1216:	56 29       	or	r21, r6
    1218:	4a 29       	or	r20, r10
    121a:	c9 2f       	mov	r28, r25
    121c:	d0 e0       	ldi	r29, 0x00	; 0
    121e:	dc 2f       	mov	r29, r28
    1220:	cc 27       	eor	r28, r28
    1222:	d2 95       	swap	r29
    1224:	d0 7f       	andi	r29, 0xF0	; 240
    1226:	4c 2b       	or	r20, r28
    1228:	5d 2b       	or	r21, r29
    122a:	43 83       	std	Z+3, r20	; 0x03
    122c:	54 83       	std	Z+4, r21	; 0x04
    122e:	01 c0       	rjmp	.+2      	; 0x1232 <qtm_acquisition_process+0x2a4>
    1230:	ff cf       	rjmp	.-2      	; 0x1230 <qtm_acquisition_process+0x2a2>
    1232:	df ef       	ldi	r29, 0xFF	; 255
    1234:	ed 1a       	sub	r14, r29
    1236:	fd 0a       	sbc	r15, r29
    1238:	6b 5f       	subi	r22, 0xFB	; 251
    123a:	7f 4f       	sbci	r23, 0xFF	; 255
    123c:	0a 5f       	subi	r16, 0xFA	; 250
    123e:	1f 4f       	sbci	r17, 0xFF	; 255
    1240:	d3 ce       	rjmp	.-602    	; 0xfe8 <qtm_acquisition_process+0x5a>
    1242:	92 e0       	ldi	r25, 0x02	; 2
    1244:	90 93 56 3e 	sts	0x3E56, r25	; 0x803e56 <touch_seq_lib_state>
    1248:	0e c0       	rjmp	.+28     	; 0x1266 <qtm_acquisition_process+0x2d8>
    124a:	83 e0       	ldi	r24, 0x03	; 3
    124c:	0c c0       	rjmp	.+24     	; 0x1266 <qtm_acquisition_process+0x2d8>
    124e:	4f e0       	ldi	r20, 0x0F	; 15
    1250:	2f e0       	ldi	r18, 0x0F	; 15
    1252:	a2 2e       	mov	r10, r18
    1254:	d7 cf       	rjmp	.-82     	; 0x1204 <qtm_acquisition_process+0x276>
    1256:	4f e0       	ldi	r20, 0x0F	; 15
    1258:	23 30       	cpi	r18, 0x03	; 3
    125a:	31 05       	cpc	r19, r1
    125c:	08 f0       	brcs	.+2      	; 0x1260 <qtm_acquisition_process+0x2d2>
    125e:	73 cf       	rjmp	.-282    	; 0x1146 <qtm_acquisition_process+0x1b8>
    1260:	d1 cf       	rjmp	.-94     	; 0x1204 <qtm_acquisition_process+0x276>
    1262:	40 e0       	ldi	r20, 0x00	; 0
    1264:	cf cf       	rjmp	.-98     	; 0x1204 <qtm_acquisition_process+0x276>
    1266:	df 91       	pop	r29
    1268:	cf 91       	pop	r28
    126a:	1f 91       	pop	r17
    126c:	0f 91       	pop	r16
    126e:	ff 90       	pop	r15
    1270:	ef 90       	pop	r14
    1272:	df 90       	pop	r13
    1274:	cf 90       	pop	r12
    1276:	bf 90       	pop	r11
    1278:	af 90       	pop	r10
    127a:	9f 90       	pop	r9
    127c:	8f 90       	pop	r8
    127e:	7f 90       	pop	r7
    1280:	6f 90       	pop	r6
    1282:	5f 90       	pop	r5
    1284:	4f 90       	pop	r4
    1286:	3f 90       	pop	r3
    1288:	08 95       	ret

0000128a <qtm_ptc_init_acquisition_module>:
    128a:	cf 93       	push	r28
    128c:	dc 01       	movw	r26, r24
    128e:	89 2b       	or	r24, r25
    1290:	79 f1       	breq	.+94     	; 0x12f0 <qtm_ptc_init_acquisition_module+0x66>
    1292:	ed 91       	ld	r30, X+
    1294:	fc 91       	ld	r31, X
    1296:	11 97       	sbiw	r26, 0x01	; 1
    1298:	60 81       	ld	r22, Z
    129a:	71 81       	ldd	r23, Z+1	; 0x01
    129c:	40 e0       	ldi	r20, 0x00	; 0
    129e:	50 e0       	ldi	r21, 0x00	; 0
    12a0:	20 e0       	ldi	r18, 0x00	; 0
    12a2:	30 e0       	ldi	r19, 0x00	; 0
    12a4:	90 e0       	ldi	r25, 0x00	; 0
    12a6:	26 17       	cp	r18, r22
    12a8:	37 07       	cpc	r19, r23
    12aa:	79 f0       	breq	.+30     	; 0x12ca <qtm_ptc_init_acquisition_module+0x40>
    12ac:	12 96       	adiw	r26, 0x02	; 2
    12ae:	ed 91       	ld	r30, X+
    12b0:	fc 91       	ld	r31, X
    12b2:	13 97       	sbiw	r26, 0x03	; 3
    12b4:	e4 0f       	add	r30, r20
    12b6:	f5 1f       	adc	r31, r21
    12b8:	c0 81       	ld	r28, Z
    12ba:	81 81       	ldd	r24, Z+1	; 0x01
    12bc:	8c 2b       	or	r24, r28
    12be:	98 2b       	or	r25, r24
    12c0:	2f 5f       	subi	r18, 0xFF	; 255
    12c2:	3f 4f       	sbci	r19, 0xFF	; 255
    12c4:	4a 5f       	subi	r20, 0xFA	; 250
    12c6:	5f 4f       	sbci	r21, 0xFF	; 255
    12c8:	ee cf       	rjmp	.-36     	; 0x12a6 <qtm_ptc_init_acquisition_module+0x1c>
    12ca:	99 23       	and	r25, r25
    12cc:	99 f0       	breq	.+38     	; 0x12f4 <qtm_ptc_init_acquisition_module+0x6a>
    12ce:	80 91 56 3e 	lds	r24, 0x3E56	; 0x803e56 <touch_seq_lib_state>
    12d2:	81 11       	cpse	r24, r1
    12d4:	06 c0       	rjmp	.+12     	; 0x12e2 <qtm_ptc_init_acquisition_module+0x58>
    12d6:	90 93 22 06 	sts	0x0622, r25	; 0x800622 <gain_setting_int_cap+0x7f7134>
    12da:	81 e0       	ldi	r24, 0x01	; 1
    12dc:	80 93 56 3e 	sts	0x3E56, r24	; 0x803e56 <touch_seq_lib_state>
    12e0:	05 c0       	rjmp	.+10     	; 0x12ec <qtm_ptc_init_acquisition_module+0x62>
    12e2:	80 91 22 06 	lds	r24, 0x0622	; 0x800622 <gain_setting_int_cap+0x7f7134>
    12e6:	98 2b       	or	r25, r24
    12e8:	90 93 22 06 	sts	0x0622, r25	; 0x800622 <gain_setting_int_cap+0x7f7134>
    12ec:	80 e0       	ldi	r24, 0x00	; 0
    12ee:	03 c0       	rjmp	.+6      	; 0x12f6 <qtm_ptc_init_acquisition_module+0x6c>
    12f0:	8b e0       	ldi	r24, 0x0B	; 11
    12f2:	01 c0       	rjmp	.+2      	; 0x12f6 <qtm_ptc_init_acquisition_module+0x6c>
    12f4:	82 e0       	ldi	r24, 0x02	; 2
    12f6:	cf 91       	pop	r28
    12f8:	08 95       	ret

000012fa <qtm_ptc_qtlib_assign_signal_memory>:
    12fa:	00 97       	sbiw	r24, 0x00	; 0
    12fc:	31 f0       	breq	.+12     	; 0x130a <qtm_ptc_qtlib_assign_signal_memory+0x10>
    12fe:	80 93 89 3e 	sts	0x3E89, r24	; 0x803e89 <qtm_raw_data_measurements_ptr>
    1302:	90 93 8a 3e 	sts	0x3E8A, r25	; 0x803e8a <qtm_raw_data_measurements_ptr+0x1>
    1306:	80 e0       	ldi	r24, 0x00	; 0
    1308:	08 95       	ret
    130a:	8b e0       	ldi	r24, 0x0B	; 11
    130c:	08 95       	ret

0000130e <qtm_ptc_start_measurement_seq>:
    130e:	61 15       	cp	r22, r1
    1310:	71 05       	cpc	r23, r1
    1312:	91 f1       	breq	.+100    	; 0x1378 <qtm_ptc_start_measurement_seq+0x6a>
    1314:	00 97       	sbiw	r24, 0x00	; 0
    1316:	81 f1       	breq	.+96     	; 0x1378 <qtm_ptc_start_measurement_seq+0x6a>
    1318:	20 91 56 3e 	lds	r18, 0x3E56	; 0x803e56 <touch_seq_lib_state>
    131c:	22 23       	and	r18, r18
    131e:	71 f1       	breq	.+92     	; 0x137c <qtm_ptc_start_measurement_seq+0x6e>
    1320:	24 30       	cpi	r18, 0x04	; 4
    1322:	71 f1       	breq	.+92     	; 0x1380 <qtm_ptc_start_measurement_seq+0x72>
    1324:	80 93 87 3e 	sts	0x3E87, r24	; 0x803e87 <qtm_acquisition_control_working_set_ptr>
    1328:	90 93 88 3e 	sts	0x3E88, r25	; 0x803e88 <qtm_acquisition_control_working_set_ptr+0x1>
    132c:	60 93 54 3e 	sts	0x3E54, r22	; 0x803e54 <ptc_seq_measure_complete_pointer>
    1330:	70 93 55 3e 	sts	0x3E55, r23	; 0x803e55 <ptc_seq_measure_complete_pointer+0x1>
    1334:	20 ec       	ldi	r18, 0xC0	; 192
    1336:	20 93 18 06 	sts	0x0618, r18	; 0x800618 <gain_setting_int_cap+0x7f712a>
    133a:	dc 01       	movw	r26, r24
    133c:	ed 91       	ld	r30, X+
    133e:	fc 91       	ld	r31, X
    1340:	22 81       	ldd	r18, Z+2	; 0x02
    1342:	20 34       	cpi	r18, 0x40	; 64
    1344:	21 f4       	brne	.+8      	; 0x134e <qtm_ptc_start_measurement_seq+0x40>
    1346:	20 91 18 06 	lds	r18, 0x0618	; 0x800618 <gain_setting_int_cap+0x7f712a>
    134a:	20 62       	ori	r18, 0x20	; 32
    134c:	05 c0       	rjmp	.+10     	; 0x1358 <qtm_ptc_start_measurement_seq+0x4a>
    134e:	20 38       	cpi	r18, 0x80	; 128
    1350:	41 f4       	brne	.+16     	; 0x1362 <qtm_ptc_start_measurement_seq+0x54>
    1352:	20 91 18 06 	lds	r18, 0x0618	; 0x800618 <gain_setting_int_cap+0x7f712a>
    1356:	28 62       	ori	r18, 0x28	; 40
    1358:	20 93 18 06 	sts	0x0618, r18	; 0x800618 <gain_setting_int_cap+0x7f712a>
    135c:	10 92 1e 06 	sts	0x061E, r1	; 0x80061e <gain_setting_int_cap+0x7f7130>
    1360:	13 c0       	rjmp	.+38     	; 0x1388 <qtm_ptc_start_measurement_seq+0x7a>
    1362:	21 38       	cpi	r18, 0x81	; 129
    1364:	79 f4       	brne	.+30     	; 0x1384 <qtm_ptc_start_measurement_seq+0x76>
    1366:	20 91 18 06 	lds	r18, 0x0618	; 0x800618 <gain_setting_int_cap+0x7f712a>
    136a:	28 62       	ori	r18, 0x28	; 40
    136c:	20 93 18 06 	sts	0x0618, r18	; 0x800618 <gain_setting_int_cap+0x7f712a>
    1370:	26 e8       	ldi	r18, 0x86	; 134
    1372:	20 93 1e 06 	sts	0x061E, r18	; 0x80061e <gain_setting_int_cap+0x7f7130>
    1376:	08 c0       	rjmp	.+16     	; 0x1388 <qtm_ptc_start_measurement_seq+0x7a>
    1378:	8b e0       	ldi	r24, 0x0B	; 11
    137a:	08 95       	ret
    137c:	83 e0       	ldi	r24, 0x03	; 3
    137e:	08 95       	ret
    1380:	81 e0       	ldi	r24, 0x01	; 1
    1382:	08 95       	ret
    1384:	82 e0       	ldi	r24, 0x02	; 2
    1386:	08 95       	ret
    1388:	10 92 00 06 	sts	0x0600, r1	; 0x800600 <gain_setting_int_cap+0x7f7112>
    138c:	dc 01       	movw	r26, r24
    138e:	ed 91       	ld	r30, X+
    1390:	fc 91       	ld	r31, X
    1392:	84 81       	ldd	r24, Z+4	; 0x04
    1394:	80 31       	cpi	r24, 0x10	; 16
    1396:	08 f0       	brcs	.+2      	; 0x139a <qtm_ptc_start_measurement_seq+0x8c>
    1398:	80 e1       	ldi	r24, 0x10	; 16
    139a:	80 93 03 06 	sts	0x0603, r24	; 0x800603 <gain_setting_int_cap+0x7f7115>
    139e:	81 e0       	ldi	r24, 0x01	; 1
    13a0:	80 93 0b 06 	sts	0x060B, r24	; 0x80060b <gain_setting_int_cap+0x7f711d>
    13a4:	80 93 0a 06 	sts	0x060A, r24	; 0x80060a <gain_setting_int_cap+0x7f711c>
    13a8:	80 93 4b 3e 	sts	0x3E4B, r24	; 0x803e4b <qtm_which_mode_current>
    13ac:	10 92 57 3e 	sts	0x3E57, r1	; 0x803e57 <current_measure_channel>
    13b0:	10 92 58 3e 	sts	0x3E58, r1	; 0x803e58 <current_measure_channel+0x1>
    13b4:	35 dd       	rcall	.-1430   	; 0xe20 <select_next_channel_to_measure>
    13b6:	81 11       	cpse	r24, r1
    13b8:	0a c0       	rjmp	.+20     	; 0x13ce <qtm_ptc_start_measurement_seq+0xc0>
    13ba:	84 e0       	ldi	r24, 0x04	; 4
    13bc:	80 93 56 3e 	sts	0x3E56, r24	; 0x803e56 <touch_seq_lib_state>
    13c0:	80 91 57 3e 	lds	r24, 0x3E57	; 0x803e57 <current_measure_channel>
    13c4:	90 91 58 3e 	lds	r25, 0x3E58	; 0x803e58 <current_measure_channel+0x1>
    13c8:	5e dd       	rcall	.-1348   	; 0xe86 <qtm_measure_node>
    13ca:	80 e0       	ldi	r24, 0x00	; 0
    13cc:	08 95       	ret
    13ce:	82 e0       	ldi	r24, 0x02	; 2
    13d0:	80 93 56 3e 	sts	0x3E56, r24	; 0x803e56 <touch_seq_lib_state>
    13d4:	08 95       	ret

000013d6 <qtm_enable_sensor_node>:
    13d6:	00 97       	sbiw	r24, 0x00	; 0
    13d8:	c9 f0       	breq	.+50     	; 0x140c <qtm_enable_sensor_node+0x36>
    13da:	dc 01       	movw	r26, r24
    13dc:	ed 91       	ld	r30, X+
    13de:	fc 91       	ld	r31, X
    13e0:	11 97       	sbiw	r26, 0x01	; 1
    13e2:	20 81       	ld	r18, Z
    13e4:	31 81       	ldd	r19, Z+1	; 0x01
    13e6:	26 17       	cp	r18, r22
    13e8:	37 07       	cpc	r19, r23
    13ea:	90 f0       	brcs	.+36     	; 0x1410 <qtm_enable_sensor_node+0x3a>
    13ec:	45 e0       	ldi	r20, 0x05	; 5
    13ee:	46 9f       	mul	r20, r22
    13f0:	90 01       	movw	r18, r0
    13f2:	47 9f       	mul	r20, r23
    13f4:	30 0d       	add	r19, r0
    13f6:	11 24       	eor	r1, r1
    13f8:	14 96       	adiw	r26, 0x04	; 4
    13fa:	ed 91       	ld	r30, X+
    13fc:	fc 91       	ld	r31, X
    13fe:	15 97       	sbiw	r26, 0x05	; 5
    1400:	e2 0f       	add	r30, r18
    1402:	f3 1f       	adc	r31, r19
    1404:	81 e0       	ldi	r24, 0x01	; 1
    1406:	80 83       	st	Z, r24
    1408:	80 e0       	ldi	r24, 0x00	; 0
    140a:	08 95       	ret
    140c:	8b e0       	ldi	r24, 0x0B	; 11
    140e:	08 95       	ret
    1410:	82 e0       	ldi	r24, 0x02	; 2
    1412:	08 95       	ret

00001414 <qtm_calibrate_sensor_node>:
    1414:	fc 01       	movw	r30, r24
    1416:	89 2b       	or	r24, r25
    1418:	d1 f1       	breq	.+116    	; 0x148e <qtm_calibrate_sensor_node+0x7a>
    141a:	a0 81       	ld	r26, Z
    141c:	b1 81       	ldd	r27, Z+1	; 0x01
    141e:	8d 91       	ld	r24, X+
    1420:	9c 91       	ld	r25, X
    1422:	11 97       	sbiw	r26, 0x01	; 1
    1424:	86 17       	cp	r24, r22
    1426:	97 07       	cpc	r25, r23
    1428:	a0 f1       	brcs	.+104    	; 0x1492 <qtm_calibrate_sensor_node+0x7e>
    142a:	12 96       	adiw	r26, 0x02	; 2
    142c:	9c 91       	ld	r25, X
    142e:	04 80       	ldd	r0, Z+4	; 0x04
    1430:	f5 81       	ldd	r31, Z+5	; 0x05
    1432:	e0 2d       	mov	r30, r0
    1434:	90 34       	cpi	r25, 0x40	; 64
    1436:	59 f4       	brne	.+22     	; 0x144e <qtm_calibrate_sensor_node+0x3a>
    1438:	85 e0       	ldi	r24, 0x05	; 5
    143a:	86 9f       	mul	r24, r22
    143c:	d0 01       	movw	r26, r0
    143e:	87 9f       	mul	r24, r23
    1440:	b0 0d       	add	r27, r0
    1442:	11 24       	eor	r1, r1
    1444:	ae 0f       	add	r26, r30
    1446:	bf 1f       	adc	r27, r31
    1448:	84 e3       	ldi	r24, 0x34	; 52
    144a:	92 e0       	ldi	r25, 0x02	; 2
    144c:	0d c0       	rjmp	.+26     	; 0x1468 <qtm_calibrate_sensor_node+0x54>
    144e:	90 58       	subi	r25, 0x80	; 128
    1450:	92 30       	cpi	r25, 0x02	; 2
    1452:	80 f4       	brcc	.+32     	; 0x1474 <qtm_calibrate_sensor_node+0x60>
    1454:	85 e0       	ldi	r24, 0x05	; 5
    1456:	86 9f       	mul	r24, r22
    1458:	d0 01       	movw	r26, r0
    145a:	87 9f       	mul	r24, r23
    145c:	b0 0d       	add	r27, r0
    145e:	11 24       	eor	r1, r1
    1460:	ae 0f       	add	r26, r30
    1462:	bf 1f       	adc	r27, r31
    1464:	87 e6       	ldi	r24, 0x67	; 103
    1466:	95 e0       	ldi	r25, 0x05	; 5
    1468:	13 96       	adiw	r26, 0x03	; 3
    146a:	8d 93       	st	X+, r24
    146c:	9c 93       	st	X, r25
    146e:	14 97       	sbiw	r26, 0x04	; 4
    1470:	80 e0       	ldi	r24, 0x00	; 0
    1472:	01 c0       	rjmp	.+2      	; 0x1476 <qtm_calibrate_sensor_node+0x62>
    1474:	82 e0       	ldi	r24, 0x02	; 2
    1476:	95 e0       	ldi	r25, 0x05	; 5
    1478:	96 9f       	mul	r25, r22
    147a:	90 01       	movw	r18, r0
    147c:	97 9f       	mul	r25, r23
    147e:	30 0d       	add	r19, r0
    1480:	11 24       	eor	r1, r1
    1482:	e2 0f       	add	r30, r18
    1484:	f3 1f       	adc	r31, r19
    1486:	90 81       	ld	r25, Z
    1488:	92 60       	ori	r25, 0x02	; 2
    148a:	90 83       	st	Z, r25
    148c:	08 95       	ret
    148e:	8b e0       	ldi	r24, 0x0B	; 11
    1490:	08 95       	ret
    1492:	82 e0       	ldi	r24, 0x02	; 2
    1494:	08 95       	ret

00001496 <qtm_t81x_ptc_handler_eoc>:
    1496:	10 92 00 06 	sts	0x0600, r1	; 0x800600 <gain_setting_int_cap+0x7f7112>
    149a:	40 91 10 06 	lds	r20, 0x0610	; 0x800610 <gain_setting_int_cap+0x7f7122>
    149e:	50 91 11 06 	lds	r21, 0x0611	; 0x800611 <gain_setting_int_cap+0x7f7123>
    14a2:	80 91 57 3e 	lds	r24, 0x3E57	; 0x803e57 <current_measure_channel>
    14a6:	90 91 58 3e 	lds	r25, 0x3E58	; 0x803e58 <current_measure_channel+0x1>
    14aa:	9c 01       	movw	r18, r24
    14ac:	22 0f       	add	r18, r18
    14ae:	33 1f       	adc	r19, r19
    14b0:	e0 91 89 3e 	lds	r30, 0x3E89	; 0x803e89 <qtm_raw_data_measurements_ptr>
    14b4:	f0 91 8a 3e 	lds	r31, 0x3E8A	; 0x803e8a <qtm_raw_data_measurements_ptr+0x1>
    14b8:	e2 0f       	add	r30, r18
    14ba:	f3 1f       	adc	r31, r19
    14bc:	40 83       	st	Z, r20
    14be:	51 83       	std	Z+1, r21	; 0x01
    14c0:	01 96       	adiw	r24, 0x01	; 1
    14c2:	80 93 57 3e 	sts	0x3E57, r24	; 0x803e57 <current_measure_channel>
    14c6:	90 93 58 3e 	sts	0x3E58, r25	; 0x803e58 <current_measure_channel+0x1>
    14ca:	aa dc       	rcall	.-1708   	; 0xe20 <select_next_channel_to_measure>
    14cc:	81 11       	cpse	r24, r1
    14ce:	08 c0       	rjmp	.+16     	; 0x14e0 <qtm_t81x_ptc_handler_eoc+0x4a>
    14d0:	84 e0       	ldi	r24, 0x04	; 4
    14d2:	80 93 56 3e 	sts	0x3E56, r24	; 0x803e56 <touch_seq_lib_state>
    14d6:	80 91 57 3e 	lds	r24, 0x3E57	; 0x803e57 <current_measure_channel>
    14da:	90 91 58 3e 	lds	r25, 0x3E58	; 0x803e58 <current_measure_channel+0x1>
    14de:	d3 cc       	rjmp	.-1626   	; 0xe86 <qtm_measure_node>
    14e0:	e0 91 54 3e 	lds	r30, 0x3E54	; 0x803e54 <ptc_seq_measure_complete_pointer>
    14e4:	f0 91 55 3e 	lds	r31, 0x3E55	; 0x803e55 <ptc_seq_measure_complete_pointer+0x1>
    14e8:	09 94       	ijmp

000014ea <_exit>:
    14ea:	f8 94       	cli

000014ec <__stop_program>:
    14ec:	ff cf       	rjmp	.-2      	; 0x14ec <__stop_program>
